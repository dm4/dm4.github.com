<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | blog.dm4.tw]]></title>
  <link href="http://blog.dm4.tw/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.dm4.tw/"/>
  <updated>2012-05-11T21:44:14+08:00</updated>
  <id>http://blog.dm4.tw/</id>
  <author>
    <name><![CDATA[dm4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.bashrc sourced twice]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice/"/>
    <updated>2012-05-11T21:08:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/11/dot-bashrc-sourced-twice</id>
    <content type="html"><![CDATA[<p>昨天解決了困擾了一陣子的問題，在 <code>.bashrc</code> 裡，如果有改到 <code>$PATH</code> ：</p>

<pre><code>export PATH=~/bin:$PATH
</code></pre>

<p>又因為我會用到 <a href="http://tmux.sourceforge.net/">tmux</a> ，所以在 <code>tmux</code> 裡開新的 shell 時，會再 source 一次 <code>.bashrc</code> ，本來我的解法是這樣：</p>

<pre><code>[ -z "$TMUX" ] &amp;&amp; export PATH=~/bin:$PATH
</code></pre>

<p>也就是在 <code>tmux</code> 裡新開啟的 shell 並不會再改一次 <code>$PATH</code> ，可是這樣又遇到了另一個問題：當新的 shell 打開時，本來應該被加在前面的 <code>~/bin</code> 會被接到後面去，我在想應該是開新 shell 時 bash 自己做的處理，我在 <code>/etc/bashrc</code> 裡也沒有看到相關的 script 。</p>

<p>對於這個問題我最後的解法是參考 <a href="http://perlbrew.pl/">perlbrew</a> 裡的這段 script ：</p>

<pre><code>export PATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,$ENV{PATH};')"

if [[ -z "$PERLBREW_PATH" ]]; then
    export PERLBREW_PATH="$PERLBREW_ROOT/bin"
fi

export PATH="$PERLBREW_PATH:$PATH_WITHOUT_PERLBREW"
</code></pre>

<p>最後的結果：</p>

<pre><code>export PATH="~/bin:$(perl -e 'print join ":", grep { $_ ne "~/bin" } split/:/, $ENV{PATH};')"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ and [[ in shell script]]></title>
    <link href="http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script/"/>
    <updated>2012-05-10T17:01:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/05/10/and-in-shell-script</id>
    <content type="html"><![CDATA[<p>終於搞懂在 shell script 裡 <code>[ ... ]</code> 和 <code>[[ ... ]]</code> 的差別了</p>

<pre><code>$ help [
[: [ arg... ]
    This is a synonym for the "test" builtin, but the last
    argument must be a literal `]', to match the opening `['.
[[ ... ]]: [[ expression ]]
    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators

        ( EXPRESSION )  Returns the value of EXPRESSION
        ! EXPRESSION    True if EXPRESSION is false; else false
        EXPR1 &amp;&amp; EXPR2  True if both EXPR1 and EXPR2 are true; else false
        EXPR1 || EXPR2  True if either EXPR1 or EXPR2 is true; else false

    When the `==' and `!=' operators are used, the string to the right of the
    operator is used as a pattern and pattern matching is performed.  The
    &amp;&amp; and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.
</code></pre>

<p>簡單的說就是要用 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code>, <code>()</code> 的話要用 <code>[[ ... ]]</code></p>
]]></content>
  </entry>
  
</feed>
