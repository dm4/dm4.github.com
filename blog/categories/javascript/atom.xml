<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | blog.dm4.tw]]></title>
  <link href="http://blog.dm4.tw/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.dm4.tw/"/>
  <updated>2014-07-14T12:41:27+08:00</updated>
  <id>http://blog.dm4.tw/</id>
  <author>
    <name><![CDATA[dm4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhantomJS 初體驗]]></title>
    <link href="http://blog.dm4.tw/blog/2014/05/11/my-first-experience-with-phantomjs/"/>
    <updated>2014-05-11T20:39:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2014/05/11/my-first-experience-with-phantomjs</id>
    <content type="html"><![CDATA[<p>最近因為想要爬個網頁資料，結果礙於處理不了萬惡的 <code>__VIEWSTATE</code> 和 <code>__EVENTVALIDATION</code> ，在時間的壓力下就決定改用 ggm 推薦 <a href="http://phantomjs.org">PhantomJS</a> ，一用之下驚為天人啊，太神了！</p>

<p><a href="http://phantomjs.org">PhantomJS</a> 概念就是在裡面跑一個 Webkit ，然後讓你用 JavaScript 控制它，所以可以模擬瀏覽器載入網頁之後 inject script / evaluate script / screenshot 的動作，官方文件也有寫到可以拿來作 web 的 testing ，模擬瀏覽、點擊之類的瀏覽器操作。</p>

<p>官網的 <a href="http://phantomjs.org/quick-start.html">Quick Start</a> 寫的蠻清楚的， <a href="http://phantomjs.org/examples/index.html">Examples</a> 也有很多範例可以參考，我自己用到的功能只有連線一個網頁後，對網頁的 <code>document</code> 作操作，然後把結果印出來，下面這段簡單的 code 就是連上 <a href="http://blog.dm4.tw">http://blog.dm4.tw</a> 首頁，拿到最新一篇文章的標題，印出標題之後截圖：</p>

<p>``` javascript
var page = require(&lsquo;webpage&rsquo;).create();</p>

<p>page.open(&lsquo;<a href="http://blog.dm4.tw">http://blog.dm4.tw</a>&rsquo;, function() {</p>

<pre><code>var article_title = page.evaluate(function() {
    return document.getElementsByClassName("entry-title")[0].children[0].innerHTML;
});
console.log(article_title);
page.render('blog.png');
phantom.exit();
</code></pre>

<p>});
```</p>

<h2>PhantomJS + Node.js</h2>

<p>可以用 <a href="https://github.com/Medium/phantomjs">https://github.com/Medium/phantomjs</a> ，裡面也有提到怎麼用 <code>node</code> 跑起來：</p>

<p>``` javascript
var path = require(&lsquo;path&rsquo;)
var childProcess = require(&lsquo;child_process&rsquo;)
var phantomjs = require(&lsquo;phantomjs&rsquo;)
var binPath = phantomjs.path</p>

<p>var childArgs = [
  path.join(__dirname, &lsquo;phantomjs-script.js&rsquo;),
  &lsquo;some other argument (passed to phantomjs script)&rsquo;
]</p>

<p>childProcess.execFile(binPath, childArgs, function(err, stdout, stderr) {
  // handle results
})
```</p>

<p>不過要注意他是開 process 跑的，不要像我一不注意開太多結果……</p>

<h2>遇到的問題</h2>

<p>因為直接用 <code>node</code> 跑的話沒噴錯誤訊息，所以下面這兩個問題找了好久啊，如果發現 <code>node</code> 跑怪怪的，可以直接用 <code>phantomjs</code> 跑跑看，至少錯誤訊息比較清楚……</p>

<h3>在 Ubuntu 上跑不起來</h3>

<p>因為要 render 的關係，所以要裝 <code>libfontconfig</code></p>

<pre><code>sudo apt-get install libfontconfig
</code></pre>

<h3>打不開 https 的網頁</h3>

<p>有些 https 網頁憑證沒設好，預設很貼心把它擋下來了，如果要打開的話，執行時要加上參數 <code>phantomjs --ignore-ssl-errors=true</code> ，如果是用 <code>node</code> 跑的話是要加在 arguments 裡：</p>

<p><code>javascript
var childArgs = [
  '--ignore-ssl-errors=true',
  path.join(__dirname, 'phantomjs-script.js'),
  'some other argument (passed to phantomjs script)'
]
</code></p>

<p>雖然跑起來有點慢，不過功能太強了啊！讓我以後有點懶的去看 http request 用 <code>curl</code> 送 query 了 XD</p>
]]></content>
  </entry>
  
</feed>
